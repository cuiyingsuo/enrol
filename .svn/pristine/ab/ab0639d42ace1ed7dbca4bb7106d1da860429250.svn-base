package com.cz.enrol.service.plugIns;

import java.io.File;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cz.enrol.dao.order.OrderMainMapper;
import com.cz.enrol.dao.organize.CampusMapper;
import com.cz.enrol.dao.organize.ClassMapper;
import com.cz.enrol.dao.sequence.SeqMapper;
import com.cz.enrol.dao.student.ClassStudentMapper;
import com.cz.enrol.dao.student.StudentMapper;
import com.cz.enrol.entity.Campus;
import com.cz.enrol.entity.ClassStudent;
import com.cz.enrol.entity.EnrolClass;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.Student;
import com.cz.enrol.exception.BaseException;
import com.cz.enrol.exception.BeanNullException;
import com.cz.enrol.utils.PriceUtil;
import com.timevale.esign.sdk.esignpro.bean.HttpConnectConfig;
import com.timevale.esign.sdk.esignpro.bean.PositionBean;
import com.timevale.esign.sdk.esignpro.bean.ProjectConfig;
import com.timevale.esign.sdk.esignpro.bean.SignPDFFileBean;
import com.timevale.esign.sdk.esignpro.bean.SignerAutoBean;
import com.timevale.esign.sdk.esignpro.bean.result.AccountResult;
import com.timevale.esign.sdk.esignpro.bean.result.CertResult;
import com.timevale.esign.sdk.esignpro.bean.result.FileDigestSignResult;
import com.timevale.esign.sdk.esignpro.bean.result.Result;
import com.timevale.esign.sdk.esignpro.constants.AccountType;
import com.timevale.esign.sdk.esignpro.constants.HttpType;
import com.timevale.esign.sdk.esignpro.constants.LicenseOrganizeType;
import com.timevale.esign.sdk.esignpro.constants.LicenseType;
import com.timevale.esign.sdk.esignpro.constants.PosType;
import com.timevale.esign.sdk.esignpro.outer.bean.OrganizeOuterBean;
import com.timevale.esign.sdk.esignpro.outer.bean.PersonalOuterBean;
import com.timevale.esign.sdk.esignpro.outer.service.AccountService;
import com.timevale.esign.sdk.esignpro.outer.service.CertService;
import com.timevale.esign.sdk.esignpro.outer.service.factory.AccountServiceFactory;
import com.timevale.esign.sdk.esignpro.outer.service.factory.CertServiceFactory;
import com.timevale.esign.sdk.esignpro.service.BackSignService;
import com.timevale.esign.sdk.esignpro.service.SDKService;
import com.timevale.esign.sdk.esignpro.service.factory.SDKServiceFactory;
@Service
public class ContractService {
	// 统一记录日志类
	private static Logger logger = LoggerFactory.getLogger("enrol");

	/* 天印签订合同参数 start */
	private String projectId = "1000005";
	private String projectSecret = "86edd6e7a95b7d1035c2f02b39599e1d";

	private String serverIp = "116.62.194.137";
	private int serverPort = 8080;
	
	private String contractCZBK="CZBK";
	
	private String contractCancelSealId = "17878923-a3d3-4d98-ba0a-e47b6e96e129";

	/* 天印签订合同参数 end */
	
	@Autowired
	private OrderMainMapper orderMainDao;
	
	@Autowired
	private StudentMapper studentDao;
	
	@Autowired
	private CampusMapper campusDao;
	
	@Autowired
	private ClassStudentMapper classStudentDao;
	
	@Autowired
	private ClassMapper classDao;
	
	@Autowired
	private SeqMapper seqDao;
	
	@Value("${contract.savePath}")
	private String contractSavePath;
	
	@Transactional
	public Map<String,Object> getContractPDF(String orderMainNo,String mobile) throws Exception{
		Map<String,Object> contractInfo = new HashMap<String,Object>();
		
		OrderMain orderMain = new OrderMain();
		orderMain.setMergeOrderNo(orderMainNo);
		
		orderMain = orderMainDao.selectOne(orderMain);
		if(null==orderMain) {
			throw new BeanNullException("查不到相应订单");
		}
		if(!mobile.equals(orderMain.getStudentMobile())) {
			throw new BaseException("登录信息与订单不匹配");
		}
		
		
		ClassStudent classStudent = new ClassStudent();
		classStudent.setClassId(orderMain.getClassId());
		classStudent.setStudentId(orderMain.getStudentId());
		
		classStudent = classStudentDao.selectOne(classStudent);
		
		String contractUrl = classStudent.getContractUrl();
		
		if(null==contractUrl||"".equals(contractUrl)) {
			Long studentId = orderMain.getStudentId();
			Long campusId = orderMain.getCampusId();
			
			Student student = studentDao.selectByPrimaryKey(studentId);
			Campus campus = campusDao.selectByPrimaryKey(campusId);
			EnrolClass enrolClass = classDao.selectByPrimaryKey(orderMain.getClassId());
			
			
			PDFParams pdfParams = new PDFParams();
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
			Long subjectId = orderMain.getSubjectId();
			String classTypeCode = enrolClass.getClassTypeCode();
			int contractNo = seqDao.nextVal("contract_no"); 
			
			String year = sdf.format(new Date());
			String subjectIdStr = "";
			if(subjectId<10) {
				subjectIdStr="0"+subjectId;
			}else {
				subjectIdStr=String.valueOf(subjectId);
			}
			String classType = "";
			if("class_detail_base".equals(classTypeCode)) {
				classType="1";
			}else {
				classType="2";
			}
			DecimalFormat df = new DecimalFormat("0000000");
			String num7=df.format(contractNo);
			
			String serial = "ITCAST-"+year+"-"+subjectIdStr+classType+"-"+num7;
			pdfParams.setPdfSerial(serial);
			
			pdfParams.setSubSchool(student.getSchool());
			pdfParams.setStudentName(student.getName());
			pdfParams.setCardNo(student.getCardNo());
			pdfParams.setTel(student.getMobile());
			pdfParams.setAddress(student.getCardAddr());
			pdfParams.setGoodsName(orderMain.getGoodsName());
			
			sdf = new SimpleDateFormat("yyyy年MM月dd日");
			pdfParams.setStartDate(sdf.format(enrolClass.getStartDate()));
			pdfParams.setEndDate(sdf.format(enrolClass.getEndDate()));
			
			BigDecimal bdc = new BigDecimal(orderMain.getCostPrice());
			pdfParams.setPrice(bdc.movePointLeft(2).toString());
			pdfParams.setPriceCN(PriceUtil.priceToCN(bdc.movePointLeft(2)));
			
			BigDecimal bdo = new BigDecimal(orderMain.getCostPrice());
			pdfParams.setOrderPrice(bdo.movePointLeft(2).toString());
			pdfParams.setOrderPriceCN(PriceUtil.priceToCN(bdo.movePointLeft(2)));
			pdfParams.setCampusAddr(campus.getAddress());
			pdfParams.setSignLocation("北京市昌平区");
			pdfParams.setStudentTel(student.getMobile());
			pdfParams.setStudentIdentify(student.getCardNo());
			pdfParams.setStudentAddress(student.getCardAddr());
			pdfParams.setNowAddress(student.getLiveAddr());
			pdfParams.setSignDate(sdf.format(new Date()));
			
			sdf = new SimpleDateFormat("yyyy-MM-dd");
			contractUrl = "/"+sdf.format(enrolClass.getStartDate())+"/"+orderMain.getClassId()+"/";
			//本地测试：D:/，测试环境：写死h5tomcat下webapps，正式环境做配置
			String contractPath = "/usr/local/enrol_web/webapps/h5/"+contractUrl;
			File pdfFile = new File(contractPath);
			if(!pdfFile.exists()) {
				pdfFile.mkdirs();
			}
			//生产正是环境，做目录挂载生成文件直接用contractUrl
			contractUrl += student.getMobile()+".pdf";
			contractPath += student.getMobile()+".pdf";
			
			if("class_detail_base".equals(classTypeCode)) {
				new PDFUtil().createPDFBase(contractPath, pdfParams);
			}else {
				new PDFUtil().createPDFEmployment(contractPath, pdfParams);
			}
			
			classStudent.setContractPdfName(serial);
			classStudent.setContractUrl(contractUrl);
			classStudentDao.updateByPrimaryKeySelective(classStudent);
			
		}
		
		contractInfo.put("contractUrl", contractSavePath+contractUrl);
		contractInfo.put("mobile", mobile);
		contractInfo.put("contractStatus", classStudent.getContractStatus());//0、不允许签订，1、允许签订，2、已签订，3、允许废弃 4、已废弃
		contractInfo.put("contractSignTime", classStudent.getContractSignTime());
		contractInfo.put("contractCancelTime", classStudent.getContractCancelTime());
		
		return contractInfo;
	}
	@Transactional
	public boolean signContract(String orderMainNo,String mobile) {
		OrderMain orderMain = new OrderMain();
		orderMain.setMergeOrderNo(orderMainNo);
		
		orderMain = orderMainDao.selectOne(orderMain);
		if(null==orderMain) {
			throw new BeanNullException("查不到相应订单");
		}
		if(!mobile.equals(orderMain.getStudentMobile())) {
			throw new BaseException("登录信息与订单不匹配");
		}
		
		ClassStudent classStudent = new ClassStudent();
		classStudent.setClassId(orderMain.getClassId());
		classStudent.setStudentId(orderMain.getStudentId());
		
		classStudent = classStudentDao.selectOne(classStudent);
		if(2==classStudent.getContractStatus()) {
			throw new BaseException("合同已签订");
		}
		String contractUrl = classStudent.getContractUrl();
		if(null==contractUrl||"".equals(contractUrl)){
			throw new BaseException("合同未创建，请先调用合同获取接口");
		}
		
		EnrolClass enrolClass = classDao.selectByPrimaryKey(orderMain.getClassId());
		boolean isOKSign = false;
		if(2==orderMain.getStatus()) {
			//支付完成，判断是否过了开班时间当天的9点
			isOKSign=isCanSignContract(enrolClass.getStartDate());
		}else {
			//支付中，合同状态为可签订（后台管理端可设置为该状态）
			if(1==orderMain.getStatus()&&1==classStudent.getContractStatus()) {
				isOKSign=true;
			}
		}
		
		if(!isOKSign) {
			throw new BaseException("订单状态不能签订合同");
		}
		
		
		Long studentId = orderMain.getStudentId();
		Long campusId = orderMain.getCampusId();
		
		Student student = studentDao.selectByPrimaryKey(studentId);
		
		String studentAccountId = student.getTyAccountId();
		String studentCertId = student.getTyCertId();
		if(null==studentAccountId) {
			studentAccountId=tyCreateOutAccount(student.getName(), student.getCardNo(), 0);
			if(null==studentAccountId) {
				return false;
			}
			student.setTyAccountId(studentAccountId);
			studentDao.updateByPrimaryKeySelective(student);
		}
		if(null==studentCertId) {
			studentCertId=tyCreateOutCert(studentAccountId);
			if(null==studentCertId) {
				return false;
			}
			student.setTyCertId(studentCertId);
			studentDao.updateByPrimaryKeySelective(student);
		}
		
		Campus campus = campusDao.selectByPrimaryKey(campusId);
		initService();
		String signServiceId0 = tySignToContract(contractCZBK, "0", "0", "D:/"+contractUrl, 0);
		String signServiceId1 = tySignToContract(campus.getSerialCode(), "0", "0", "D:/"+contractUrl, 1);
		
		if(null==signServiceId0||null==signServiceId1) {
			throw new BaseException("合同盖章失败");
		}
		classStudent.setTySignServiceId(signServiceId0+","+signServiceId1);
		classStudent.setContractStatus(2);
		classStudent.setContractSignTime(System.currentTimeMillis());
		classStudentDao.updateByPrimaryKeySelective(classStudent);
		
		
		
		return true;
	}
	@Transactional
	public boolean cancelContract(String orderMainNo,String mobile) {
		OrderMain orderMain = new OrderMain();
		orderMain.setMergeOrderNo(orderMainNo);
		
		orderMain = orderMainDao.selectOne(orderMain);
		if(null==orderMain) {
			throw new BeanNullException("查不到相应订单");
		}
		if(!mobile.equals(orderMain.getStudentMobile())) {
			throw new BaseException("登录信息与订单不匹配");
		}
		
		ClassStudent classStudent = new ClassStudent();
		classStudent.setClassId(orderMain.getClassId());
		classStudent.setStudentId(orderMain.getStudentId());
		
		classStudent = classStudentDao.selectOne(classStudent);
		if(3!=classStudent.getContractStatus()) {
			throw new BaseException("不允许单方废弃合同");
		}
		
		Long studentId = orderMain.getStudentId();
		Long campusId = orderMain.getCampusId();
		
		Student student = studentDao.selectByPrimaryKey(studentId);
		
		
		
		Campus campus = campusDao.selectByPrimaryKey(campusId);
		initService();
		String cancelServiceId = tySignToContract(contractCZBK, "0", contractCancelSealId, "D:/"+classStudent.getContractUrl(), 2);
		if(null==cancelServiceId) {
			throw new BaseException("取消合同盖章失败");
		}
		classStudent.setTyCancelServiceId(cancelServiceId);
		classStudent.setContractStatus(4);
		classStudent.setContractCancelTime(System.currentTimeMillis());
		classStudentDao.updateByPrimaryKeySelective(classStudent);
		return true;
	}
	
	
	private boolean isCanSignContract(Date startDate) {
		boolean isOKSign = false;
    	
        Calendar c = Calendar.getInstance();
        c.setTime(startDate);
        c.set(Calendar.HOUR_OF_DAY, 9);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.SECOND, 0);
        Date t9 = c.getTime();
			if(t9.getTime()<System.currentTimeMillis()) {
				isOKSign = true;
			}
		
		
		return isOKSign;
	}
	
	/**
	 * 初始化天印服务
	 */
	private void initService() {
		// 初始化项目
		SDKService sdkService = SDKServiceFactory.instance();
		ProjectConfig projectConfig = new ProjectConfig();
		projectConfig.setProjectId(projectId);// 项目projectid
		projectConfig.setProjectSecret(projectSecret); // 项目projectsecret

		HttpConnectConfig httpConnectConfig = new HttpConnectConfig();
		httpConnectConfig.setServerIp(serverIp);// 天印签章服务IP地址
		httpConnectConfig.setServerPort(serverPort);// 天印签章服务端口
		httpConnectConfig.setHttpType(HttpType.HTTP);
		Result result = sdkService.init(projectConfig, httpConnectConfig);
		logger.info("天印服务初始化,errCode：{}   msg：{}",result.getErrCode(),result.getMsg());
	}

	/**
	 * 创建账户
	 * 
	 * @param name
	 *            账户名称（个人：姓名，公司：公司名）
	 * @param cardNo
	 *            账号证件号（个人：身份证号，公司：社会信用代码）
	 * @param type
	 *            账户类型（0、个人，1、机构）
	 * @return 账户id
	 */
	private String tyCreateOutAccount(String name, String cardNo, int type) {
		String accountId = null;

		// 创建账户
		AccountService accountService = AccountServiceFactory.instance();
		if (type == 0) {
			PersonalOuterBean personalOuterBean = new PersonalOuterBean();
			personalOuterBean.setName(name);
			personalOuterBean.setLicenseNumber(cardNo);

			personalOuterBean.setLicenseType(LicenseType.IDCard);
			AccountResult accountResult = accountService.createAccount(personalOuterBean);// 创建个人证书
			accountId = accountResult.getAccountId();
			logger.info("创建天印个人账户：{}",accountId);

		} else {
			OrganizeOuterBean organizeOuterBean = new OrganizeOuterBean();
			organizeOuterBean.setName(name);
			organizeOuterBean.setLicenseNumber(cardNo);
			organizeOuterBean.setLicenseType(LicenseOrganizeType.SOCNO);

			AccountResult accountResult = accountService.createAccount(organizeOuterBean);// 创建企业证书
			accountId = accountResult.getAccountId();
			logger.info("创建天印企业账户：{}",accountId);
		}

		return accountId;
	}

	/**
	 * 创建CA证书
	 * @param accountId		账户id
	 * @return				CA证书id
	 */
	private String tyCreateOutCert(String accountId) {
		String certId = null;

		// 创建证书并做关联
		CertService certService = CertServiceFactory.instance();
		CertResult certResult = certService.createCert(accountId, Boolean.TRUE);
		certId = certResult.getCertId();// 证书id
		logger.info("accountId：（{}）创建CA证书：{}",accountId,certId);

		return certId;
	}
	
	/**
	 * 签订合同，盖章操作（只盖公司章）
	 * @param accountId		账户id
	 * @param certId		ca证书id（使用默认证书传0）
	 * @param sealId		印章id（使用默认印章传0，作废合同时传入作废印章id）
	 * @param fileUrl		文件地址
	 * @param fileUrl		印章类型（0、总公司，1、分公司，2，作废），主要区别在于盖章位置，及作废章需传入印章id
	 * @return 				签订记录id
	 */
	public String tySignToContract(String accountId, String certId, String sealId, String fileUrl,int type) {
		String signServiceId = null;

		// 盖章操作(签订合同)
		BackSignService backSignService = com.timevale.esign.sdk.esignpro.service.factory.BackSignServiceFactory.instance();
		SignerAutoBean signerAutoBean = new SignerAutoBean();
		signerAutoBean.setAccountId(accountId);
		signerAutoBean.setCertId(certId);
		signerAutoBean.setSealId(sealId);
		signerAutoBean.setAccountType(AccountType.Department);
		
		SignPDFFileBean signPDFFileBean = new SignPDFFileBean();
		signPDFFileBean.setSrcPdfFile(fileUrl);
		signPDFFileBean.setDstPdfFile(fileUrl);
		PositionBean positionBean = new PositionBean();
		positionBean.setPosType(PosType.Multi);
		
		if(type==0) {
			positionBean.setPosPage("4");
			positionBean.setPosX(130);
			positionBean.setPosY(430);
		}
		if(type==1) {
			positionBean.setPosPage("4");
			positionBean.setPosX(370);
			positionBean.setPosY(430);
		}
		if(type==2) {
			positionBean.setPosPage("4");
			positionBean.setPosX(250);
			positionBean.setPosY(430);
			backSignService.pdfSign(signerAutoBean, signPDFFileBean,positionBean);
			positionBean.setPosPage("4");
			positionBean.setPosX(475);
			positionBean.setPosY(430);
			backSignService.pdfSign(signerAutoBean, signPDFFileBean,positionBean);
			positionBean.setPosPage("1");
			positionBean.setPosX(150);
			positionBean.setPosY(770);
			
		}
		
		FileDigestSignResult fileDigestSignResult = backSignService.pdfSign(signerAutoBean, signPDFFileBean,positionBean);
		
		logger.info("公司：（{}）（{}）（{}）盖章返回：{}/{}/{}",accountId,certId,sealId,fileDigestSignResult.getMsg(),fileDigestSignResult.getErrCode(),fileDigestSignResult.getSignServiceId());
		signServiceId=fileDigestSignResult.getSignServiceId();//签署记录id
		
		return signServiceId;
	}
	
	public static void main(String[] args) {
		String accountId = "TY01";
		String certId = "0";
		String sealId = "0";
		String fileUrl = "D:/test.pdf";
		int type = 1;
		//initService();
		//System.out.println(new ContractService().tySealToContract(accountId, certId, sealId, fileUrl,type));
		String name = "朱怡宁";
		String cardNo = "53012119760427732X";
		type=0;
		/*accountId = tyCreateOutAccount(name, cardNo, type);
		System.out.println(accountId);
		sealId = tyCreateOutCert(accountId);
		System.out.println(sealId);*/
		System.out.println(new ContractService().isCanSignContract(new Date()));
	}
}
