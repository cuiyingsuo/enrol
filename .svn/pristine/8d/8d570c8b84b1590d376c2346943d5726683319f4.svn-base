package com.cz.enrol.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSONObject;
import com.allinpay.ets.client.RequestOrder;
import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.PayService;
import com.cz.enrol.utils.RedisUtil;

/**
 * 
 * 支付访问接口
 * 
 * @author My
 *
 */
@RestController
@RequestMapping("/payController")
public class PayController {
	@Value("${allin.h5-pay.pay-url}")
	private String serverUrl;

	// 统一记录日志类
	private Logger logger = LoggerFactory.getLogger("enrol");
	@Autowired
	private OrderMainService orderMainService;

	@Autowired
	private PayService payService;

	@Value("${server.token-key}")
	private String loginToken;

	/**
	 * 全款支付
	 * 
	 * @param orderMainNo
	 *            主订单编码
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/payFull", method = RequestMethod.POST)
	public BaseBody payFull(String orderMainNo, HttpServletRequest request,
			HttpServletResponse response) {
		BaseBody<Map<String, Object>> baseBody = new BaseBody<Map<String, Object>>();

		Map<String, Object> requestOrderMap = new HashMap<String, Object>();
		requestOrderMap.put("serverUrl", serverUrl);

		String token = request.getHeader(loginToken);
		if (null == token || !RedisUtil.hasKey(token)) {
			baseBody.setSuccess(ReturnStatus.FAILD);
			baseBody.setCode(1002);
			baseBody.setMessage("用户未登录或登录超时");
			return baseBody;
		}
		Map<String, Object> orderMainMap = orderMainService
				.queryOrderMainInfoByNo(orderMainNo);

		if (null != orderMainMap && orderMainMap.size() > 0) {
			Map<String, Object> orderMainInfo = (Map<String, Object>) orderMainMap.get("orderMainInfo");

			int status = Integer.parseInt(orderMainInfo.get("status")
					.toString());

			if (status == 2) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单已支付完成，不可支付");
				return baseBody;
			}
			if (status == 3) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单退费中，不可支付");
				return baseBody;
			}
			if (status == 4) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单已退费，不可支付");
				return baseBody;
			}
		}

		JSONObject jsonObj = JSONObject.parseObject(RedisUtil.get(token)
				.toString());

		RequestOrder requestOrder = payService.payFullRequestOrder(
				jsonObj.getString("id"), jsonObj.getString("mobile"),
				orderMainNo);

		if (null != requestOrder) {
			requestOrderMap.put("payOrderInfo", requestOrder);

			baseBody.setSuccess(ReturnStatus.SUCCESS);
			baseBody.setCode(200);
			baseBody.setContent(requestOrderMap);
			baseBody.setMessage("订单信息请求成功");
		} else {
			baseBody.setSuccess(ReturnStatus.SUCCESS);
			baseBody.setCode(200);
			baseBody.setMessage("订单信息生成失败");
		}
		return baseBody;
	}

	/**
	 * 分次支付
	 * 
	 * @param orderMainNo
	 *            主订单号
	 * @param payPrice
	 *            支付金额
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/payPart", method = RequestMethod.POST)
	public BaseBody payPart(String orderMainNo, String payPrice,
			HttpServletRequest request, HttpServletResponse response) {
		logger.info("请求分次支付：支付金额={}",payPrice);
		BaseBody<Map<String, Object>> baseBody = new BaseBody<Map<String, Object>>();
		
		BigDecimal myformat=new BigDecimal(payPrice);
		int price = myformat.movePointRight(2).intValue();
		
		Map<String, Object> requestOrderMap = new HashMap<String, Object>();
		requestOrderMap.put("serverUrl", serverUrl);
		RequestOrder requestOrder = null;

		String token = request.getHeader(loginToken);
		if (null == token || !RedisUtil.hasKey(token)) {
			baseBody.setSuccess(ReturnStatus.FAILD);
			baseBody.setCode(1002);
			baseBody.setMessage("用户未登录或登录超时");
			return baseBody;
		}

		Map<String, Object> orderMainMap = orderMainService.queryOrderMainInfoByNo(orderMainNo);

		if (null != orderMainMap && orderMainMap.size() > 0) {
			Map<String, Object> orderMainInfo = (Map<String, Object>) orderMainMap.get("orderMainInfo");

			int status = Integer.parseInt(orderMainInfo.get("status")
					.toString());
			int orderMainPrice = Integer.parseInt(orderMainInfo.get(
					"orderPrice").toString());
			int orderMainPaid = Integer.parseInt(orderMainInfo.get("paid")
					.toString());
			int payType = Integer.parseInt(orderMainInfo.get("payType")
					.toString());

			if (status == 2) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单已支付完成，不可支付");
				return baseBody;
			}
			if (status == 3) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单退费中，不可支付");
				return baseBody;
			}
			if (status == 4) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("订单已退费，不可支付");
				return baseBody;
			}
			if ((orderMainPrice - orderMainPaid - price) < 0) {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(2001);
				baseBody.setMessage("支付金额不得超过订单未支付金额");
				return baseBody;
			}

			String classTypeCode = orderMainInfo.get("classTypeCode")
					.toString();
			String classTypeName = orderMainInfo.get("classTypeName")
					.toString();

			if (payType == 1||payType==2) {
				List<Map<String, Object>> payOrderList = (List<Map<String, Object>>) orderMainMap.get("payOrderList");
				 
				if (null == payOrderList || payOrderList.size() == 0) {
					// 首次支付
					if (classTypeCode.equals("class_detail_base")) {
						if (price < 20000) {
							baseBody.setSuccess(ReturnStatus.FAILD);
							baseBody.setCode(2001);
							baseBody.setMessage("支付金额不低于200元");
							return baseBody;
						}
					}
					if (classTypeCode.equals("class_detail_employment")) {
						if (price < 50000) {
							baseBody.setSuccess(ReturnStatus.FAILD);
							baseBody.setCode(2001);
							baseBody.setMessage("支付金额不低于500元");
							return baseBody;
						}
					}

				} else if (payOrderList.size() == 1) {
					if(payType==2){
						baseBody.setSuccess(ReturnStatus.FAILD);
						baseBody.setCode(2001);
						baseBody.setMessage(classTypeName+ "贷款订单不允许二次支付");
						return baseBody;
					}
					// 二次支付
					if (classTypeCode.equals("class_detail_base")) {
						if ((orderMainPrice - orderMainPaid - price) > 0) {
							baseBody.setSuccess(ReturnStatus.FAILD);
							baseBody.setCode(2001);
							baseBody.setMessage(classTypeName
									+ ":二次支付需支付订单剩余全部未支付金额："
									+ (orderMainPrice - orderMainPaid));
							return baseBody;
						}
					}
					if (classTypeCode.equals("class_detail_employment")) {
						if ((orderMainPrice-orderMainPaid)>300000 && price < 300000) {
							baseBody.setSuccess(ReturnStatus.FAILD);
							baseBody.setCode(2001);
							baseBody.setMessage("支付金额不低于3000元");
							return baseBody;
						}
					}
				} else {
					// 三次支付
					if ((orderMainPrice - orderMainPaid - price) > 0) {
						baseBody.setSuccess(ReturnStatus.FAILD);
						baseBody.setCode(2001);
						baseBody.setMessage(classTypeName
								+ ":三次支付需支付订单剩余全部未支付金额："
								+ (orderMainPrice - orderMainPaid));
						return baseBody;
					}
				}

				JSONObject jsonObj = JSONObject.parseObject(RedisUtil
						.get(token).toString());
				//调用支付单信息组装
				requestOrder = payService.payPartRequestOrder(jsonObj
						.getString("id"), jsonObj.get("mobile").toString(),
						price, orderMainNo);

			} else {
				baseBody.setSuccess(ReturnStatus.FAILD);
				baseBody.setCode(500);
				baseBody.setMessage("订单为全额支付订单，不支持分次支付");
				return baseBody;
			}
		} else {
			baseBody.setSuccess(ReturnStatus.FAILD);
			baseBody.setCode(500);
			baseBody.setMessage("获取订单信息失败");
			return baseBody;
		}

		if (null != requestOrder) {
			requestOrderMap.put("requestOrder", requestOrder);

			baseBody.setSuccess(ReturnStatus.SUCCESS);
			baseBody.setCode(200);
			baseBody.setContent(requestOrderMap);
			baseBody.setMessage("支付信息请求成功");
		} else {
			baseBody.setSuccess(ReturnStatus.FAILD);
			baseBody.setCode(500);
			baseBody.setMessage("支付信息生成失败");
		}
		return baseBody;
	}

	/**
	 * 申请信用卡分期
	 * @param orderMainNo
	 * @return
	 */
	@RequestMapping(value = "/applyInstallment", method = RequestMethod.POST)
	public void applyInstallment(String orderMainNo,
			HttpServletRequest request, HttpServletResponse response){
		response.setContentType("text/html;charset=UTF-8");
		
		String cardInstallmentInfo = payService.makeCardInstallmentInfo(orderMainNo);
		logger.info("分期支付，提交支付方参数组装结束，生成页面代码：{}",cardInstallmentInfo);
		
		PrintWriter p=null;
		try {
			p = response.getWriter();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		p.println(cardInstallmentInfo);  
        p.close();
		
	}
}