package com.cz.enrol.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.BaseController;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.GoodsClass;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.OrderSub;
import com.cz.enrol.service.GoodsClassService;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.OrderSubService;
import com.cz.enrol.utils.PriceUtil;

/**
 * 
 * 订单信息表（主表）； 访问控制器类
 * 
 **/
@RestController
@RequestMapping("/orderController")
public class OrderController extends BaseController {

	// 统一记录日志类
	private Logger logger = LoggerFactory.getLogger("enrol");
	@Autowired
	private OrderMainService orderMainService;
	@Autowired
	// 当前业务操作接口bo
	private OrderSubService orderSubService;
	@Autowired
	private GoodsClassService gcService;

	@Value("${server.token-key}")
	private String loginToken;

	/**
	 * 查询主订单列表
	 * 
	 * @param mobile
	 *            学生手机号码
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/getOrderMainList", method = RequestMethod.GET)
	public BaseBody getOrderMainList(HttpServletRequest request) {
		
		Map<String, Object> userInfo = getUserInfoByRedis(request.getHeader(loginToken));
		String mobile = String.valueOf(userInfo.get("mobile"));
		
		List<Map<String, Object>> orderMainList = orderMainService.queryOrderMainList(mobile);
		
		if (null != orderMainList && orderMainList.size() > 0) {
			return success(orderMainList);
		} 
		
		return fail(ReturnStatus.DATA_NULL,"获取数据失败");
	}

	/**
	 * 查询分订单信息
	 * 
	 * @param id
	 *            分订单（支付订单）id
	 * @return
	 */
	@RequestMapping(value = "/getOrderSubInfo", method = RequestMethod.GET)
	public BaseBody getOrderSubInfo(@RequestParam Long id) {

		OrderSub orderSubInfo = orderSubService.queryByPrimaryKey(id);
		
		if (null != orderSubInfo) {
			return success(orderSubInfo);
		}
		return fail(ReturnStatus.DATA_NULL,"查询失败");
	}

	/**
	 * 查询分订单列表（主订单信息）
	 * 
	 * @param orderMainNo
	 *            主订单编号
	 * @return
	 */
	@RequestMapping(value = "/getOrderMainInfo", method = RequestMethod.GET)
	public BaseBody getOrderMainInfo(@RequestParam String orderMainNo,HttpServletRequest request) {
		Map<String, Object> userInfo = getUserInfoByRedis(request.getHeader(loginToken));
		String mobile = String.valueOf(userInfo.get("mobile"));

		Map<String, Object> orderMainInfo = orderMainService.queryOrderMainInfo(orderMainNo,mobile);
		if (null != orderMainInfo && orderMainInfo.size() > 0) {
			return success(orderMainInfo);
		}
		
		return fail(ReturnStatus.DATA_NULL,"查询失败");
	}

	/**
	 * 订单确认页
	 * 
	 * @param classId
	 *            班级id
	 * @param goodsId
	 *            商品id
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/confirmOrder", method = RequestMethod.GET)
	public BaseBody confirmOrder(@RequestParam Long classId,
			@RequestParam Long goodsId, HttpServletRequest request,
			HttpServletResponse response) {

		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);

		String studentMobile = String.valueOf(userInfo.get("mobile"));
		String studentName = String.valueOf(userInfo.get("name"));
		Long studentId = Long.parseLong(String.valueOf(userInfo.get("id")));

		List<GoodsClass> gcList = gcService.queryByGoodsId(goodsId);
		// 判断所传参数商品id和班级id是否匹配
		boolean isRightClass = false;
		for (GoodsClass gc : gcList) {
			if (gc.getClassId() == classId) {
				isRightClass = true;
			}
		}
		if (!isRightClass) {
			return fail(ReturnStatus.DATA_NULL,"商品信息与班级不匹配!");
		}
		
		if (isRightClass) {
			Map<String, Object> confirmOrderMap = orderMainService
					.confirmMainOrder(classId, goodsId);
			confirmOrderMap.put("studentMobile", studentMobile);
			confirmOrderMap.put("studentName", studentName);
			confirmOrderMap.put("studentId", studentId);
			if (null != confirmOrderMap) {
				return success(confirmOrderMap);
			}
		}
		return fail();
	}

	/**
	 * 提交主订单
	 * 
	 * @param classId
	 *            班级id
	 * @param goodsId
	 *            商品id
	 * @param payType
	 *            支付类型
	 * @param isReceipt
	 *            是否开具电子发票
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/submitOrderMain", method = RequestMethod.POST)
	public BaseBody submitMainOrder(@RequestParam Long classId,
			@RequestParam Long goodsId, @RequestParam int payType,
			@RequestParam int isReceipt, HttpServletRequest request,
			HttpServletResponse response) {
		logger.info("classId={};goodsId={};paytype={};isReceipt={}",classId,goodsId,payType,isReceipt);

		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);

		String studentMobile = String.valueOf(userInfo.get("mobile"));
		String studentName = String.valueOf(userInfo.get("name"));
		Long studentId = Long.parseLong(String.valueOf(userInfo.get("id")));

		List<GoodsClass> gcList = gcService.queryByGoodsId(goodsId);
		// 判断所传参数商品id和班级id是否匹配
		boolean isRightClass = false;
		for (GoodsClass gc : gcList) {
			if (gc.getClassId() == classId) {
				isRightClass = true;
			}
		}
		if (!isRightClass) {
			return fail(ReturnStatus.DATA_NULL,"商品信息与班级不匹配!");
		}
		OrderMain orderMain = orderMainService.submitMainOrder(studentId,
				studentMobile, studentName, goodsId, classId, payType,
				isReceipt);
		if (null!=orderMain) {
			return success(orderMain.getMergeOrderNo());
		}
		
		return fail(ReturnStatus.STATUS_ERROR,"提交订单失败");
	}

	/**
	 * 取消订单
	 * 
	 * @param orderId
	 *            主订单id
	 * @return
	 */
	@RequestMapping(value = "/cancelOrder", method = RequestMethod.POST)
	public BaseBody cancelOrder(Long orderId) {
		BaseBody<String> baseBody = new BaseBody<String>();
		boolean isSuccess = orderMainService.cancelOrder(orderId);
		if (isSuccess) {
			return success("订单取消成功");
		}
		
		return fail(ReturnStatus.STATUS_ERROR,"订单取消失败");
	}
	/**
	 * 获取凭证信息
	 * @param orderMainNo
	 * @return
	 */
	@RequestMapping(value = "/getReceipt", method = RequestMethod.GET)
	public BaseBody getReceipt(@RequestParam String orderSubNo){
		
		Map<String,Object> receiptInfo = orderSubService.queryReceiptInfo(orderSubNo);
		if (null==receiptInfo||receiptInfo.size()==0) {
			return fail(ReturnStatus.DATA_NULL,"找不到订单号相关订单信息");
		} else {
			//金额转为元，增加汉字金额
			int price = Integer.valueOf(receiptInfo.get("orderPrice").toString());
			BigDecimal bigDecimal = new BigDecimal(price);
			float priceStr = bigDecimal.movePointLeft(2).floatValue();
			String priceCN = PriceUtil.priceToCN(new BigDecimal(priceStr));
			
			receiptInfo.put("orderPrice", priceStr);
			receiptInfo.put("priceCN", priceCN);
			
			return success("获取电子收据信息成功");
		}
	}
	
}
