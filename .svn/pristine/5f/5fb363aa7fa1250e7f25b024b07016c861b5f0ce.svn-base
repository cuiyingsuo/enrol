package com.cz.enrol.controller.management;

import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.BasePage;
import com.cz.enrol.common.ManageBaseBody;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.Invoice;
import com.cz.enrol.entity.OrderFlow;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.service.InvoiceService;
import com.cz.enrol.service.OrderFlowService;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.vo.OrderQueryEx;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author liuzs
 *         Created by liuzhongshuai on 2017/10/26.
 */
@RestController
@RequestMapping("/managenment/orderMain")
public class ManagerOrderController {

    @Autowired
    private OrderMainService orderMainService;

    @Autowired
    private OrderFlowService orderFlowService;

    @Autowired
    private InvoiceService invoiceService;



    /**
     * 收据申请
     *
     * @param orderNo
     * @return
     */
    @PutMapping("/requestReceipt")
    public BaseBody requestReceipt(String orderNo) {

        BaseBody baseBody = new BaseBody();

        OrderMain orderMainConditions = new OrderMain();
        orderMainConditions.setMergeOrderNo(orderNo);
        OrderMain orderMain = orderMainService.selectOne(orderMainConditions);
        if (null == orderMain) {
            baseBody.setCode(1005);
            baseBody.setMessage("查无此订单!");
            baseBody.setSuccess(ReturnStatus.FAILD);
            return baseBody;
        }

        if (orderMain.getElecReceipt().intValue() == 1) {
            baseBody.setMessage("申请成功!");
            return baseBody;
        }
        orderMain.setElecReceipt(1);
        int effRo = orderMainService.updateByPk(orderMain);
        if (effRo > 0) {
            baseBody.setMessage("申请成功!");
            return baseBody;
        }
        baseBody.setMessage("申请失败!");
        baseBody.setSuccess(ReturnStatus.FAILD);
        return baseBody;
    }


    /**
     * 订单管理 分页查询列表
     *
     * @param queryEx
     * @return
     */
    @GetMapping("/queryOrderMains")
    public ManageBaseBody<BasePage<List<Map>>> queryOrderMains(@Valid OrderQueryEx queryEx, BindingResult bindingResult) {
        ManageBaseBody<BasePage<List<Map>>> baseBody = new ManageBaseBody<>();
        if (bindingResult.hasErrors()) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage(bindingResult.getFieldError().getDefaultMessage());
            return baseBody;
        }
        BasePage basePage = orderMainService.queryOrderMainsToPage(queryEx);
        baseBody.setCount(basePage.getCount());
        baseBody.setCode(0);
        baseBody.setData(basePage.getPageData());
        return baseBody;
    }

    /**
     * 订单详情
     *
     * @param orderNo
     * @return
     */
    @GetMapping("/orderMainDetail")
    public BaseBody<Map> orderMainDetail(@RequestParam(defaultValue = "0") String orderNo) {

        BaseBody<Map> baseBody = new BaseBody<Map>();
        //查询订单通过订单编号
        OrderMain orderMainConditions = new OrderMain();
        orderMainConditions.setMergeOrderNo(orderNo);
        OrderMain orderMain = orderMainService.selectOne(orderMainConditions);
        if (null == orderMain) {
            baseBody.setCode(1005);
            baseBody.setMessage("查无此订单!");
            baseBody.setSuccess(ReturnStatus.FAILD);
            return baseBody;
        }
        Map resultMap = new HashMap(4);
        //订单信息
        resultMap.put("orderInfo", orderMain);
        //支付流水
        OrderFlow orderFlow = new OrderFlow();
        orderFlow.setMargeOrderNo(orderNo);
        resultMap.put("orderFlow", orderFlowService.select(orderFlow));
        //发票信息
        Invoice invoice = new Invoice();
        invoice.setOrderNo(orderNo);
        resultMap.put("invoiceInfo", invoiceService.select(invoice));
        baseBody.setContent(resultMap);
        return baseBody;
    }

}
