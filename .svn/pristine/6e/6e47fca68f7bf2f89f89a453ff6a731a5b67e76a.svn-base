package com.cz.enrol.service;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cz.enrol.dao.student.StudentMapper;
import com.cz.enrol.entity.Student;

/**
 * 学员表 服务类
 **/
@Service
public class StudentService {

	// 统一记录日志类
	private Logger log = LoggerFactory.getLogger("enrol");
	@Autowired
	private StudentMapper studentDao;

	public Student queryStudentByMobile(String mobile) {
		Student student = new Student();
		student.setMobile(mobile);
		return studentDao.selectOne(student);
	}

	public Long checkPassword(String mobile, String password) {
		Student student = new Student();
		student.setMobile(mobile);
		Student studentInfo = studentDao.selectOne(student);
		if (null == studentInfo||!studentInfo.getPassword().equals(password)) {
			return 0L;
		}
		return studentInfo.getId();
	}

	@Transactional
	public int modifyPassword(String mobile, String password) {
		Map<String, String> params = new HashMap<String, String>();
		params.put("mobile", mobile);
		params.put("password", password);
		int rel = studentDao.updatePasswordByMobile(params);
		return rel;
	}

	@Transactional
	public int updateByMobileSelective(Student es) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("mobile", es.getMobile());
		params.put("name", es.getName());
		params.put("birthday", es.getBirthday());
		params.put("cardAddr", es.getCardAddr());
		params.put("cardNo", es.getCardNo());
		params.put("contacts", es.getContacts());
		params.put("contactsMobile", es.getContactsMobile());
		params.put("editor", es.getEditor());
		params.put("editTime", es.getEditTime());
		params.put("education", es.getEducation());
		params.put("email", es.getEmail());
		params.put("fromChannel", es.getFromChannel());
		params.put("fromChannelCode", es.getFromChannelCode());
		params.put("gender", es.getGender());
		params.put("graduationTime", es.getGraduationTime());
		params.put("image", es.getImage());
		params.put("isAcademy", es.getIsAcademy());
		params.put("isAgain", es.getIsAgain());
		params.put("isQuarter", es.getIsQuarter());
		params.put("liveAddr", es.getLiveAddr());
		params.put("liveAddrDetail", es.getLiveAddrDetail());
		params.put("major", es.getMajor());
		params.put("preComeTime", es.getPreComeTime());
		params.put("qq", es.getQq());
		params.put("school", es.getSchool());
		params.put("status", es.getStatus());
		return studentDao.updateByMobileSelective(params);
	}
}
