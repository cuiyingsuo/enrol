package com.cz.enrol.controller;

import java.util.Date;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.minidev.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.Student;
import com.cz.enrol.service.StudentService;
import com.cz.enrol.utils.RedisUtil;
import com.cz.enrol.utils.TokenUtil;

/**
 * 学员表 访问控制器类
 **/
@RestController
@RequestMapping("/loginController")
public class LoginController {

    private Logger Log = LoggerFactory.getLogger("enrol");
    @Autowired
    private StudentService studentService;

    @Value("${server.token-key}")
    private String loginToken;

    /**
     * 登录
     *
     * @param mobile   学生手机号码
     * @param password 密码
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "/login", method = RequestMethod.POST)
    public BaseBody login(@RequestParam String mobile,
                          @RequestParam String password, HttpServletRequest request,
                          HttpServletResponse response) {
        BaseBody<String> baseBody = new BaseBody<String>();

        String token = request.getHeader(loginToken);
        if (null != token && RedisUtil.hasKey(token)) {
            baseBody.setSuccess(ReturnStatus.SUCCESS);
            baseBody.setCode(200);
            baseBody.setContent(token);
            baseBody.setMessage("用户已登录");
            Log.info("################# 用户  {} 已登录. ##################", mobile);
            return baseBody;
        }
        // token值不存在或登录信息超时
        Student student = studentService.checkPassword(mobile, password);
        if (null == student) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(500);
            baseBody.setMessage("用户或密码错误");
            Log.error("################# {}用户或密码错误. ##################", mobile);
        } else {
            token = TokenUtil.getToken(mobile);

            HashMap tokenMap = new HashMap<String, Object>();
            tokenMap.put("id", student.getId());
            tokenMap.put("name", student.getName());
            tokenMap.put("mobile", mobile);
            String tokenValue = JSONObject.toJSONString(tokenMap);
            try {
                // 已token
                RedisUtil.set(token, tokenValue, 60 * 60);
            } catch (Exception e) {
                baseBody.setSuccess(ReturnStatus.FAILD);
                baseBody.setCode(200);
                baseBody.setMessage("找不到缓存服务器");
                Log.debug("{}------找不到缓存服务器", new Date());
                e.printStackTrace();
            }
            Log.debug("################# 用户  {} 登录成功. ##################",
                    mobile);
            baseBody.setSuccess(ReturnStatus.SUCCESS);
            baseBody.setCode(200);
            baseBody.setContent(token);
            baseBody.setMessage("登录成功");
        }
        return baseBody;
    }

    /**
     * 检查登录
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "/checkLogin", method = RequestMethod.GET)
    public BaseBody<String> checkLogin(HttpServletRequest request,
                                       HttpServletResponse response) {
        BaseBody<String> baseBody = new BaseBody<String>();
        String token = request.getHeader(loginToken);
        if (null != token && RedisUtil.hasKey(token)) {
            baseBody.setSuccess(ReturnStatus.SUCCESS);
            baseBody.setCode(200);
            baseBody.setContent(token);
            baseBody.setMessage("用户已登录");
        } else {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1002);
            baseBody.setMessage("用户未登录");
        }
        return baseBody;
    }

    /**
     * 退出登录
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "/offLogin", method = RequestMethod.POST)
    public BaseBody<String> offLogin(HttpServletRequest request,
                                     HttpServletResponse response) {
        BaseBody<String> baseBody = new BaseBody<String>();

        String token = request.getHeader(loginToken);

        if (null != token && RedisUtil.hasKey(token)) {
            RedisUtil.del(token);
            baseBody.setSuccess(ReturnStatus.SUCCESS);
            baseBody.setCode(200);
            baseBody.setMessage("退出登录成功");
        } else {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(500);
            baseBody.setMessage("用户未登录");
        }
        return baseBody;
    }
}
