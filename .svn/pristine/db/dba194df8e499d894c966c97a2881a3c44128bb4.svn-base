package com.cz.enrol.service;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.allinpay.ets.client.RequestOrder;
import com.allinpay.model.AllinPayStageDto;
import com.allinpay.service.AllinPayStageConsume;
import com.allinpay.util.RsaSign;
import com.allinpay.util.RsaUtil;
import com.cz.enrol.dao.order.OrderMainMapper;
import com.cz.enrol.dao.order.OrderSubMapper;
import com.cz.enrol.dao.student.StudentMapper;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.OrderSub;
import com.cz.enrol.entity.Student;
import com.cz.enrol.utils.HttpRequest;
import com.cz.enrol.utils.MD5Util;
import com.sun.tools.javac.comp.Todo;

@Service
public class AllinpayService {
	// 统一记录日志类
	private Logger logger = LoggerFactory.getLogger("enrol");
	/**---------------------------------支付相关参数开始--------------------------------------------*/
	@Value("${allin.reg-url}")
	private String regUrl = "";
	@Value("${allin.receive-url}")
	private String receiveUrl;// 商户系统通知地址
	@Value("${allin.key}")
	private String key;
	@Value("${allin.version}")
	private String version;
	@Value("${allin.merchant-id}")
	private String merchantId;// 商户号
	
	
	private String language = "1";
	private String inputCharset = "1";
	private String pickupUrl = "";// 取货地址
	private String payType = "33";
	private String signType = "0";
	private String orderNo = "";
	private String orderAmount = "";
	private String orderDatetime = "";// 商户的订单提交时间
	private String orderCurrency = "0";// 订单金额币种类型
	private String orderExpireDatetime = "";
	private String payerTelephone = "";
	private String payerEmail = "";
	private String payerName = "";
	private String payerIDCard = "";
	private String pid = "";
	private String productName = "";// 商品名称
	private String productId = "enrol";
	private String productNum = "1";
	private String productPrice = "";
	private String productDesc = "";
	private String ext1 = "";
	private String ext2 = "";
	private String extTL = "";
	private String issuerId = "";// 发卡方代码
	private String pan = "";
	private String tradeNature = "SERVICES";// GOODS表示实物类型，SERVICES表示服务类型
	private String sign = "";
	/**------------------------------------------支付参数结束-------------------------------------------------------*/

	@Autowired
	private OrderMainMapper orderMainDao;

	@Autowired
	private OrderSubMapper orderSubDao;

	@Autowired
	private StudentMapper studentDao;
	
	/**---------------------------------------信用卡分期参数开始---------------------------------------*/
	private String app_key="testhn";
	private String method="allinpay.order.orderinstall.add";
	private String timestamp;
	private String v="1.0";
	private String sign_v="1";
	private String format="json";
	private String mer_id="999290053990002";
	private String channel="1";
	private String order_id;
	private String amount;
	private String trade_date;
	private String trade_time;
	private String nper="6";
	private String pdno="0200";
	private String description;
	private String comment;
	private String return_url="http://172.17.0.91:8080/h5/index1.html";
	private String notify_url="http://172.17.0.91:8080/enrol/payController/installmentNotify";
	private String creditName;
	private String cetitype;
	private String idno;
	private String phoneNo;
	private String creditNo;
	private String validty_period;
	private String cvv;
	private String relatePhone;
	private String relate_addr;
	private int goods_type;
	private String insur_code;
	private String cosign_name;
	private String cosign_phone;
	private String cosign_address;
	private String express;
	private String express_code;
	private String ext_info;
	/**-------------------------------------------信用卡分期参数结束----------------------------------------*/

	

	// 拼接支付订单信息
	public RequestOrder getRequestOrder(String userId, OrderSub orderSub,
			OrderMain orderMain) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

		Student student = studentDao.selectByPrimaryKey(Long.parseLong(userId));
		String allinpayUserid = student.getAllinpayUserid();
		if (null == allinpayUserid || "".equals(allinpayUserid)) {
			logger.info("去通联支付注册：merchantId={}", merchantId);
			// 注册通联会员
			allinpayUserid = allinpayRegister(signType, merchantId, "enrol"
					+ student.getMobile(), key);
			if (null != allinpayUserid || !"".equals(allinpayUserid)) {
				logger.info("注册通联支付会员成功：merchantId={}，allinpayUserid={}",
						merchantId, allinpayUserid);
				student.setAllinpayUserid(allinpayUserid);
				studentDao.updateByPrimaryKeySelective(student);
			}
		}
		if (null == allinpayUserid || "".equals(allinpayUserid)) {
			return null;
		}
		logger.info("组装支付订单:userId={},orderSub={},orderMain={}", userId,
				orderSub, orderMain);
		// 构造订单请求对象，生成signMsg。
		RequestOrder requestOrder = new RequestOrder();
		if (null != inputCharset && !"".equals(inputCharset)) {
			requestOrder.setInputCharset(Integer.parseInt(inputCharset));
		}
		requestOrder.setPickupUrl("");
		requestOrder.setReceiveUrl(receiveUrl);
		requestOrder.setVersion(version);
		if (null != language && !"".equals(language)) {
			requestOrder.setLanguage(Integer.parseInt(language));
		}
		requestOrder.setSignType(Integer.parseInt(signType));
		requestOrder.setPayType(Integer.parseInt(payType));
		requestOrder.setIssuerId(issuerId);
		requestOrder.setMerchantId(merchantId);
		requestOrder.setPayerName(payerName);
		requestOrder.setPayerEmail(payerEmail);
		requestOrder.setPayerTelephone(payerTelephone);
		requestOrder.setPayerIDCard(payerIDCard);
		requestOrder.setPid(pid);
		requestOrder.setOrderNo(orderSub.getOrderNo());
		//TODO(去支付写死了是1分，上线要改正)
		requestOrder.setOrderAmount(1L);//requestOrder.setOrderAmount(orderSub.getOrderPrice().longValue());
		requestOrder.setOrderCurrency(orderCurrency);
		Date date = new Date(orderSub.getCreateTime());
		requestOrder.setOrderDatetime(sdf.format(date));
		Calendar ca = Calendar.getInstance();
		ca.setTime(date);
		ca.add(Calendar.HOUR_OF_DAY, 1);
		requestOrder.setOrderExpireDatetime(sdf.format(date));
		requestOrder.setProductName(orderMain.getGoodsName());

		requestOrder.setProductPrice(orderSub.getOrderPrice().longValue());

		if (null != productNum && !"".equals(productNum)) {
			requestOrder.setProductNum(Integer.parseInt(productNum));
		}
		requestOrder.setProductId(productId);
		requestOrder.setProductDesc(orderMain.getSubjectName());
		requestOrder.setExt1("<USER>" + allinpayUserid + "</USER>");
		requestOrder.setExt2(ext2);
		requestOrder.setExtTL(extTL);// 通联商户拓展业务字段，在v2.2.0版本之后才使用到的，用于开通分账等业务
		requestOrder.setPan(pan);
		requestOrder.setTradeNature(tradeNature);
		requestOrder.setKey(key); // key为MD5密钥，密钥是在通联支付网关会员服务网站上设置。

		String strSrcMsg = requestOrder.getSrc(); // 此方法用于debug，测试通过后可注释。
		String strSignMsg = requestOrder.doSign(); // 签名，设为signMsg字段值。
		logger.info(strSrcMsg);
		requestOrder.setSignMsg(strSignMsg);

		return requestOrder;
	}

	/**
	 * 通联h5支付注册会员
	 * 
	 * @param signType
	 * @param merchantId
	 * @param partnerUserId
	 * @param key
	 * @return
	 */
	private String allinpayRegister(String signType, String merchantId,
			String partnerUserId, String key) {
		String result = "";
		String src = getSignSrc(signType, merchantId, partnerUserId, key);
		String signMsg = MD5Util.encryption(src).toUpperCase().trim();
		result = getSignSrcAndSignMsg(signType, merchantId, partnerUserId,
				signMsg);
		System.out.println(result + "提交地址=" + regUrl);
		String callBack = HttpRequest.sendGet(regUrl, result);
		System.out.println("返回报文：callBack=" + callBack + "\n");
		result = getUserIdByJson(callBack);
		return result;
	}

	// 原串 的首尾要加上 & & 这个很重要
	private String getSignSrc(String signType, String merchantId,
			String partnerUserId, String key) {
		String result = "";
		result = "&signType=" + signType + "&merchantId=" + merchantId
				+ "&partnerUserId=" + partnerUserId + "&key=" + key + "&";
		return result;
	}

	// 通过Md5获得源串
	private String getSignSrcAndSignMsg(String signType, String merchantId,
			String partnerUserId, String signMsg) {
		String result = "";
		result = "signType=" + signType + "&merchantId=" + merchantId
				+ "&partnerUserId=" + partnerUserId + "&signMsg=" + signMsg
				+ "";
		return result;
	}

	private String getUserIdByJson(String return_msg) {
		String result = "";
		JSONObject object;
		try {
			object = new JSONObject(return_msg);
			result = object.optString("userId");
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return result;

	}
	public static void main(String[] args){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		System.out.println(sdf.format(new Date()));
	}
	public String getCardInstallmentInfo(OrderSub orderSub) {
		logger.info("分期支付，提交支付方参数组装开始");
		AllinPayStageDto consumeDto = new AllinPayStageDto();
		
		BigDecimal myformat = new BigDecimal("100000");//BigDecimal myformat=new BigDecimal(orderSub.getOrderPrice());
		float price = myformat.movePointLeft(2).floatValue();
		
		consumeDto.setApp_key(app_key);
		consumeDto.setMethod(method);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = sdf.format(new Date());
		logger.info("时间戳：{}",timestamp);
		consumeDto.setTimestamp(timestamp);
		consumeDto.setV(v);
		consumeDto.setSign_v(sign_v);
		consumeDto.setFormat(format);
		consumeDto.setMer_id(mer_id);
		consumeDto.setChannel(channel);
		consumeDto.setOrder_id(orderSub.getOrderNo());
		consumeDto.setAmount(String.valueOf(price));
		
		Long createTime = orderSub.getCreateTime();
		sdf.applyPattern("yyyyMMdd");
		String trade_date = sdf.format(createTime);
		sdf.applyPattern("HHmmss");
		String trade_time = sdf.format(createTime);
		
		consumeDto.setTrade_date(trade_date);
		consumeDto.setTrade_time(trade_time);
		
		consumeDto.setNper(nper);
		consumeDto.setPdno(pdno);
		
		consumeDto.setNotify_url(notify_url);
		consumeDto.setReturn_url(return_url);
		// TODO(记得配置起来)
		String keyPath = "/usr/local/enrol/libs/private.pfx";
		logger.info("keyPath:"+keyPath);
		
		String privatePwd = "123456";
		String reqUrl = "http://gateway.ulinkpay.com:8002/asaop/rest/api/";
		
		AllinPayStageConsume consume = new  AllinPayStageConsume(consumeDto, keyPath, privatePwd, reqUrl);
		String rel=null;
		try {
			rel = consume.getRequestHtml();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return rel;
	}
	
	public boolean installmentNotify(HashMap<String,String> requestMap){
		StringBuilder msg = RsaSign.getQueryParamsString(requestMap);
		logger.info("分期支付返回msg={}",msg);
		//TODO(记得做配置 )
		String publicKeyPath="/usr/local/enrol/libs/public.cer";
		boolean verifyRel = RsaUtil.rsaVerify(sign, msg.toString(), publicKeyPath);
		logger.info("分期支付验证结果：{}",verifyRel);
		return verifyRel;
	}
}
