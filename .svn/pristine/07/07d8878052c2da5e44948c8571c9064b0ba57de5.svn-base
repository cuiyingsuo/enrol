package com.cz.enrol.service.plugIns;

import java.io.FileOutputStream;
import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cz.enrol.dao.organize.CampusMapper;
import com.cz.enrol.dao.student.SealMapper;
import com.cz.enrol.entity.Campus;
import com.cz.enrol.entity.Seal;
import com.cz.enrol.entity.Student;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.timevale.esign.sdk.esignpro.bean.HttpConnectConfig;
import com.timevale.esign.sdk.esignpro.bean.PositionBean;
import com.timevale.esign.sdk.esignpro.bean.ProjectConfig;
import com.timevale.esign.sdk.esignpro.bean.SignPDFFileBean;
import com.timevale.esign.sdk.esignpro.bean.SignerAutoBean;
import com.timevale.esign.sdk.esignpro.bean.result.AccountResult;
import com.timevale.esign.sdk.esignpro.bean.result.CertResult;
import com.timevale.esign.sdk.esignpro.bean.result.FileDigestSignResult;
import com.timevale.esign.sdk.esignpro.bean.result.Result;
import com.timevale.esign.sdk.esignpro.bean.result.SealResult;
import com.timevale.esign.sdk.esignpro.constants.AccountType;
import com.timevale.esign.sdk.esignpro.constants.HttpType;
import com.timevale.esign.sdk.esignpro.constants.LicenseOrganizeType;
import com.timevale.esign.sdk.esignpro.constants.LicenseType;
import com.timevale.esign.sdk.esignpro.constants.PosType;
import com.timevale.esign.sdk.esignpro.constants.SealColorType;
import com.timevale.esign.sdk.esignpro.constants.SealType;
import com.timevale.esign.sdk.esignpro.outer.bean.OrganizeOuterBean;
import com.timevale.esign.sdk.esignpro.outer.bean.PersonalOuterBean;
import com.timevale.esign.sdk.esignpro.outer.bean.TemplateSealOuterBean;
import com.timevale.esign.sdk.esignpro.outer.service.AccountService;
import com.timevale.esign.sdk.esignpro.outer.service.BackSignService;
import com.timevale.esign.sdk.esignpro.outer.service.CertService;
import com.timevale.esign.sdk.esignpro.outer.service.SealService;
import com.timevale.esign.sdk.esignpro.outer.service.factory.AccountServiceFactory;
import com.timevale.esign.sdk.esignpro.outer.service.factory.BackSignServiceFactory;
import com.timevale.esign.sdk.esignpro.outer.service.factory.CertServiceFactory;
import com.timevale.esign.sdk.esignpro.outer.service.factory.SealServiceFactory;
import com.timevale.esign.sdk.esignpro.service.SDKService;
import com.timevale.esign.sdk.esignpro.service.factory.SDKServiceFactory;

/**
 * 合同
 * 
 * @author My
 *
 */
@Service
public class AgreementService {
	/* 天印签订合同参数 start */
	private String projectId = "1000005";
	private String projectSecret = "86edd6e7a95b7d1035c2f02b39599e1d";

	private String serverIp = "116.62.194.137";
	private int serverPort = 8080;

	private static int PORSON_ERROR = 1;// 个人信息错误
	private static int DEPARMENT_ERROR = 2;// 公司信息错误
	private static int SUCCESE = 0;// 成功

	/* 天印签订合同参数 end */
	@Autowired
	private SealMapper sealDao;
	
	@Autowired
	private CampusMapper campusDao;

	public int cancelAgreement() {
		return 0;
	}

	public int signAgreement(Student student, String campusId,String fileUrl) {
		//个人账户
		Seal sealPerson = new Seal();
		sealPerson.setEnrolId(String.valueOf(student.getId()));
		sealPerson.setType(0);
		sealPerson = sealDao.selectOne(sealPerson);
		if(null==sealPerson){
			sealPerson = createAccount(student.getName(),student.getCardNo(),0);
			sealPerson.setCreateTime(System.currentTimeMillis());
			if(null==sealPerson||"".equals(sealPerson.getAccountId())){
				return PORSON_ERROR;
			}
			sealDao.insert(sealPerson);
		}
		Campus campus = campusDao.selectByPrimaryKey(campusId);
		//分公司账户
		Seal sealCampus1 = new Seal();
		sealCampus1.setEnrolId(campusId);
		sealCampus1.setType(1);
		sealCampus1 = sealDao.selectOne(sealCampus1);
		if(null==sealCampus1){
			sealCampus1 = createAccount(campus.getOrgName(),campus.getOrgSOCNo(),1);
			sealCampus1.setCreateTime(System.currentTimeMillis());
			sealDao.insert(sealCampus1);
		}
		//总公司账户
		Seal sealCampus2 = new Seal();
		sealCampus2.setEnrolId("0");
		sealCampus2.setType(2);
		sealCampus2=sealDao.selectOne(sealCampus2);
		if(null==sealCampus2){
			sealCampus2=createAccount("江苏传智播客教育科技股份有限公司","913213220535045526",1);
			sealCampus2.setCreateTime(System.currentTimeMillis());
			sealDao.insert(sealCampus2);
		}
		seal(sealPerson,fileUrl,0);
		seal(sealCampus1,fileUrl,1);
		seal(sealCampus2,fileUrl,2);
		return 0;
	}

	private Seal createAccount(String name, String carNo,int type) {
		Seal seal = new Seal();
		// 初始化项目
		SDKService sdkService = SDKServiceFactory.instance();
		ProjectConfig projectConfig = new ProjectConfig();
		projectConfig.setProjectId(projectId);// 项目projectid
		projectConfig.setProjectSecret(projectSecret); // 项目projectsecret

		HttpConnectConfig httpConnectConfig = new HttpConnectConfig();
		httpConnectConfig.setServerIp(serverIp);// 天印签章服务IP地址
		httpConnectConfig.setServerPort(serverPort);// 天印签章服务端口
		httpConnectConfig.setHttpType(HttpType.HTTP);
		Result result = sdkService.init(projectConfig, httpConnectConfig);
		System.out.println(result.getMsg());

		// 创建个人账户
		AccountService accountService = AccountServiceFactory.instance();
		String accountId=null;
		if(type==0){
			PersonalOuterBean personalOuterBean = new PersonalOuterBean();
			personalOuterBean.setName(name);
			personalOuterBean.setLicenseNumber(carNo);
			
			//personalOuterBean.setMobile(mobile);
			personalOuterBean.setLicenseType(LicenseType.IDCard);
			AccountResult accountResult = accountService
					.createAccount(personalOuterBean);// 创建个人证书
			accountId = accountResult.getAccountId();
			seal.setAccountId(accountId);
		}else{
			OrganizeOuterBean organizeOuterBean = new OrganizeOuterBean();
			organizeOuterBean.setName(name);
			organizeOuterBean.setLicenseNumber(carNo);
			organizeOuterBean.setLicenseType(LicenseOrganizeType.ORANO);
			AccountResult accountResult = accountService.createAccount(organizeOuterBean);// 创建企业证书
			accountId = accountResult.getAccountId();
			seal.setAccountId(accountId);
		}
		System.out.println(accountId);
		// 创建证书并做关联
		CertService certService = CertServiceFactory.instance();
		CertResult certResult = certService.createCert(accountId, Boolean.TRUE);
		String certId = certResult.getCertId();// 证书id
		seal.setCertId(certId);
		System.out.println(certId);

		// 创建印章
		SealService sealService = SealServiceFactory.instance();
		TemplateSealOuterBean templateSealOuterBean = new TemplateSealOuterBean();
		templateSealOuterBean.setSealName(name);
		if(type==0){
			templateSealOuterBean.setType(SealType.SEAL_PERSON);
		}else{
			templateSealOuterBean.setType(SealType.SEAL_OFFICIAL);
		}
		// templateSealOuterBean.setTemplateType(TemplateType.SQUARE);
		// templateSealOuterBean.setCentral(TemplateCentralType.STAR);
		// templateSealOuterBean.setTemplateOfficialType(TemplateOfficialType.TEMPLATE_ROUND);
		// templateSealOuterBean.gethText();
		// templateSealOuterBean.setqText();
		templateSealOuterBean.setColor(SealColorType.RED);
		SealResult sealResult = sealService.createSeal(accountId,
				templateSealOuterBean, Boolean.TRUE);
		String sealId = sealResult.getSealId();
		seal.setSealId(sealId);
		System.out.println(sealId);
		
		return seal;
	}

	/**
	 * 天印签订合同流程
	 * 
	 * @param name
	 * @param carNo
	 * @param fileUrl
	 * @return
	 */
	private int seal(Seal seal,String fileUrl,int type) {
		
		// 盖章操作
		BackSignService backSignService = BackSignServiceFactory.instance();
		//个人盖章
		SignerAutoBean signerAutoBean = new SignerAutoBean();
		signerAutoBean.setAccountId(seal.getAccountId());
		if(type==0){
			signerAutoBean.setAccountType(AccountType.Person);
		}else{
			signerAutoBean.setAccountType(AccountType.Department);
		}
		signerAutoBean.setCertId(seal.getCertId());
		signerAutoBean.setSealId(seal.getSealId());
		SignPDFFileBean signPDFFileBean = new SignPDFFileBean();
		signPDFFileBean.setSrcPdfFile(fileUrl);
		signPDFFileBean.setDstPdfFile(fileUrl);
		PositionBean positionBean = new PositionBean();
		positionBean.setPosType(PosType.Multi);
		//个人盖章位置
		if(type==0){
			positionBean.setPosPage("1");
			positionBean.setPosX(200);
			positionBean.setPosY(200);
		}
		//分公司盖章位置
		if(type==1){
			positionBean.setPosPage("2");
			positionBean.setPosX(200);
			positionBean.setPosY(200);
		}
		//总公司盖章位置
		if(type==2){
			positionBean.setPosPage("3");
			positionBean.setPosX(200);
			positionBean.setPosY(200);
		}
		// positionBean.setKey("");
		FileDigestSignResult fileDigestSignResult = backSignService.pdfSign(
				signerAutoBean, signPDFFileBean, positionBean);
		System.out.printf(fileDigestSignResult.getSignServiceId());
		return 0;
	}

	public static void createAgreement(String templateFile, String outFile)
			throws IOException, DocumentException {
		PdfReader reader = new PdfReader(templateFile); // 模版文件目录
		PdfStamper ps = new PdfStamper(reader, new FileOutputStream(outFile)); // 生成的输出流
		BaseFont bf = BaseFont.createFont("C:/WINDOWS/Fonts/SIMSUN.TTC,1",
				BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
		AcroFields s = ps.getAcroFields();
		// 设置文本域表单的字体
		// 对于模板要显中文的，在此处设置字体比在pdf模板中设置表单字体的好处：
		// 1.模板文件的大小不变；2.字体格式满足中文要求
		s.setFieldProperty("test", "textfont", bf, null);
		s.setFieldProperty("@studentName", "textfont", bf, null);
		s.setFieldProperty("@goodsNam", "textfont", bf, null);
		s.setFieldProperty("@sYear", "textfont", bf, null);
		s.setFieldProperty("@goodsPrice", "textfont", bf, null);
		// 编辑文本域表单的内容
		s.setField("test", "北京");
		s.setField("@studentName", "崔英锁");
		s.setField("@goodsNam", "黑马程序员");
		s.setField("@sYear", "2017");
		s.setField("@goodsPrice", "10000");
		ps.setFormFlattening(true); // 这句不能少
		ps.close();
		reader.close();
	}

	public static void main(String[] args) throws IOException,
			DocumentException {
		// createAgreement("D:/tmp/15210173019.pdf", "D:/tmp/15801514010.pdf");
		/*System.out.println(new AgreementService().seal("崔英锁",
				"371481198611216013", "15801514012", "D:/tmp/15801514010.pdf"));*/
	}
}
