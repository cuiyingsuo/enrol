package com.cz.enrol.service.management;

import com.cz.enrol.common.BasePage;
import com.cz.enrol.common.BaseService;
import com.cz.enrol.dao.banner.BannerMapper;
import com.cz.enrol.entity.Banner;
import com.cz.enrol.exception.AmountPromiseException;
import com.cz.enrol.exception.FileValueNoMatchException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


/**
 * @author liuzs
 *         Created by liuzhongshuai on 2017/10/21.
 */
@Service
public class ManagerBannerService extends BaseService<Banner> {


    @Autowired
    private BannerMapper bannerMapper;


    /**
     * 新增banner
     *
     * @param banner
     * @return
     */
    @Transactional(rollbackFor = Exception.class)
    public Banner mergeBanner(Banner banner) {

        int maxBannerCount = 5;
        //查询现有可用banner数量，最多5个
        Integer banCount = bannerMapper.getCountForEnable();

        Long currTime = System.currentTimeMillis();

        if (banner.getId() != null && banner.getId() > 0) {
            if (null == banner.getStatus()) {
                throw new FileValueNoMatchException("字段status只能为 0、1", 1006);
            }
            if (null != banCount && banCount.intValue() >= maxBannerCount && banner.getStatus() == 1) {
                throw new AmountPromiseException("banner 最多为5个");
            }
            banner.setEditTime(currTime);
            bannerMapper.updateByPrimaryKeySelective(banner);

        } else {
            if (null != banCount && banCount.intValue() >= maxBannerCount) {
                throw new AmountPromiseException("banner 最多为5个");
            }
            banner.setCreateTime(currTime);
            bannerMapper.insert(banner);
        }
        return banner;
    }

    /**
     * 发布/取消发布 banner
     *
     * @param id
     * @param status
     */
    @Transactional(rollbackFor = Exception.class)
    public int upOrDownBanner(int id, int status) {

        Banner banner = new Banner();
        banner.setId((long) id);
        banner.setStatus((byte) status);

        int effRow = bannerMapper.updateByPrimaryKeySelective(banner);
        return effRow;
    }


    /**
     * 支持条件查询 banner集合
     *
     * @param banner
     * @return
     */
    public BasePage<Banner> queryBannersToPage(Banner banner, int startNum, int pageSize) {

        BasePage<Banner> bannerBasePage = this.queryListByPage(banner, startNum, pageSize);

        return bannerBasePage;
    }


}
