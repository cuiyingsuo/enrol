package com.cz.enrol.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.BaseController;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.Student;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.StudentService;
import com.cz.enrol.service.plugIns.ContractService;
import com.cz.enrol.service.plugIns.PDFParams;
import com.cz.enrol.service.plugIns.PersonAuthService;
import com.cz.enrol.service.plugIns.SMSService;
import com.cz.enrol.utils.RedisUtil;
@RestController
@RequestMapping("/contractController")
public class ContractController extends BaseController{
	
	// 统一记录日志类
	private static Logger logger = LoggerFactory.getLogger("enrol");
	
	@Autowired
	private ContractService contractService;
	
	@Autowired
	private OrderMainService orderMainService;
	
	@Autowired
	private StudentService studentService;
	
	@Autowired
	private SMSService smsService;
	
	@Autowired
	private PersonAuthService personAuthService;
	
	@Value("${server.token-key-mobile}")
    private String loginToken;
	
	/**
	 * 获取合同列表
	 * @param orderMainNo
	 * @return
	 */
	@RequestMapping(value = "/getContractList", method = RequestMethod.POST)
	public BaseBody getContractList(@RequestParam String orderMainNo,HttpServletRequest request){
		
		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);
		String mobile = String.valueOf(userInfo.get("mobile"));
		
		List<Map<String,Object>> contractList = contractService.getContractList(orderMainNo, mobile);
		
		if(null==contractList || contractList.size()==0){
			return fail(ReturnStatus.DATA_NULL,"查不到合同信息");
		}
    	
		return success(contractList);
	}
	/**
	 * 获取合同信息
	 * @param orderMainNo
	 * @return
	 */
	@RequestMapping(value = "/getContractPDF", method = RequestMethod.POST)
	public BaseBody getContractPDF(@RequestParam String orderMainNo,HttpServletRequest request){
		
		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);
		Long studentId = Long.valueOf(String.valueOf(userInfo.get("id")));
		
		Map<String, Object> contractMap=null;
		
		Student student = studentService.selectByPrimaryKey(studentId);
		
		PDFParams pdfParams = PDFParams.getPDFParams(student);
		
		if(null==pdfParams){
			return fail(ReturnStatus.STATUS_ERROR,"请完善个人信息");
		}
		
		try {
			contractMap = contractService.getContractPDF(orderMainNo, pdfParams);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("订单：{}  合同生成失败",orderMainNo);
		}
    	
		if(null==contractMap){
			return fail(ReturnStatus.DATA_NULL,"合同生成失败");
		}
		return success(contractMap);
	}
	/**
	 * 发送签订合同操作验证码
	 * @param mobile
	 * @param orderMainNo
	 * @return
	 */
	@RequestMapping(value = "/sendContractSms", method = RequestMethod.POST)
	public BaseBody sendContractSms(@RequestParam String orderMainNo,HttpServletRequest request){
		
		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);
		String mobile = String.valueOf(userInfo.get("mobile"));
		
		OrderMain orderMain = new OrderMain();
		orderMain.setMergeOrderNo(orderMainNo);
		orderMain = orderMainService.selectOne(orderMain);
		
		if(null!=orderMain && mobile.equals(orderMain.getStudentMobile())){
			String code = smsService.sendContractSms(mobile);
			logger.info("手机验证码：{}",code);
			if(null==code||"".equals(code)){
				return fail(500,"短信发送失败");
			}
			try{
				RedisUtil.set(code+mobile, mobile,10 * 60);
			}catch(Exception e){
				logger.error("redis服务器异常，{}",e.getMessage());
			}
			return success("验证码发送成功");
		}else{
			return fail(ReturnStatus.DATA_NULL,"登录信息与请求数据不匹配");
		}
	}
	/**
	 * 签订合同
	 * @param mobile
	 * @param orderMainNo
	 * @param smsCode
	 * @return
	 */
	@RequestMapping(value = "/signContract", method = RequestMethod.POST)
	public BaseBody signContract(@RequestParam Long contractId,@RequestParam String smsCode,HttpServletRequest request){
		
		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);
		String mobile = String.valueOf(userInfo.get("mobile"));
		Long studentId = Long.valueOf(String.valueOf(userInfo.get("id")));
		
		/*if(!RedisUtil.hasKey(smsCode+mobile)){
			return fail(500,"验证码无效");
		}*/
		Student student = studentService.selectByPrimaryKey(studentId);
		try {
			boolean authRel = personAuthService.requestPerson(student.getName(), student.getCardNo());
			if(!authRel){
				return fail(ReturnStatus.STATUS_ERROR,"实名认证失败");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		boolean caRel = contractService.createStudentCA(studentId);
		if(!caRel){
			return fail(ReturnStatus.STATUS_ERROR,"个人CA证书生成失败");
		}
		
		boolean signRel = contractService.signContract(contractId, mobile);
		if(signRel) {
			return success("合同签订成功");
		}
		return fail(500,"合同签订失败");
	}
	/**
	 * 废弃合同
	 * @param orderMainNo
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/cancelContract", method = RequestMethod.POST)
	public BaseBody cancelContract(@RequestParam Long contractId,@RequestParam String smsCode,HttpServletRequest request){
		String userToken = request.getHeader(loginToken);
		Map<String,Object> userInfo = getUserInfoByRedis(userToken);
		String mobile = String.valueOf(userInfo.get("mobile"));
		
		/*if(!RedisUtil.hasKey(smsCode+mobile)){
			return fail(500,"验证码无效");
		}*/
		
		boolean b = contractService.cancelContract(contractId, mobile);
		if(b) {
			return success("成功");
		}
		return fail(500,"合同作废失败");
	}
}
