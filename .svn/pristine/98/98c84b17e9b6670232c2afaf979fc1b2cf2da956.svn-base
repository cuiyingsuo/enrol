package com.cz.enrol.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.DictType;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.Student;
import com.cz.enrol.service.DictService;
import com.cz.enrol.service.StudentService;
import com.cz.enrol.utils.MD5Util;
import com.cz.enrol.utils.RedisUtil;

/**
 * 
 * 学员表 访问控制器类
 * 
 **/
@RestController
@RequestMapping("/myInfoController")
public class StudentController {

	// 统一记录日志类
	private Logger Log = LoggerFactory.getLogger("enrol");
	@Autowired
	// 当前业务操作接口bo
	private StudentService studentService;
	@Autowired
	private DictService dictService;

	/**
	 * 查询学生信息
	 * 
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/getStudentInfo", method = RequestMethod.GET)
	public BaseBody<Student> getStudentInfo(@RequestParam String mobile) {
		BaseBody<Student> baseBody = new BaseBody<Student>();

		Student studentInfo = studentService.queryStudentByMobile(mobile);
		if (null != studentInfo) {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setData(studentInfo);
			baseBody.setReturnMsg("查询成功");
		} else {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("查询无记录");
		}
		return baseBody;
	}

	/**
	 * 编辑学生信息页面
	 * 
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/getChannelList", method = RequestMethod.GET)
	public BaseBody<List> editStudentPage() {
		BaseBody<List> baseBody = new BaseBody<List>();

		List<Map<String, String>> channelList = dictService
				.queryInfoByType(DictType.CHANNEL);
		if (null != channelList&&channelList.size()>0) {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setData(channelList);
			baseBody.setReturnMsg("查询成功");
		} else {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("查询无记录");
		}
		return baseBody;
	}

	/**
	 * 更新学生信息
	 * 
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/updateStudentInfo", method = RequestMethod.POST)
	public BaseBody<Student> updateStudentInfo(Student es) {
		BaseBody<Student> baseBody = new BaseBody<Student>();

		if (null == es.getMobile() || "".equals(es.getMobile())) {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("手机号码为必传参数");
			return baseBody;
		}
		int rel = studentService.updateByMobileSelective(es);
		if (rel > 0) {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setReturnMsg("学生信息更新成功");
		} else {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("学生信息更新失败");
		}
		return baseBody;
	}

	/**
	 * 登录
	 * 
	 * @param mobile
	 *            手机号码
	 * @param password
	 *            密码
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public BaseBody login(@RequestParam String mobile,
			@RequestParam String password) {
		BaseBody<String> baseBody = new BaseBody<String>();

		// token值不存在或登录信息超时
		int status = studentService.checkPassword(mobile, password);
		if (status == 0) {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("用户信息不存在");
			Log.error("################# 用户  {} 不存在. ##################",
					mobile);
		}
		if (status == 1) {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("密码不正确");
			Log.error("################# 用户  {} 密码不正确. ##################",
					mobile);
		}
		if (status == 2) {
			try {
				String token = MD5Util.encryption(mobile
						+ System.currentTimeMillis());
				String tokenValue = mobile;
				new RedisUtil().set(token, tokenValue, 30 * 60);
				baseBody.setReturnResult(ReturnStatus.SUCCESS);
				baseBody.setReturnCode(200);
				baseBody.setData(token);
				baseBody.setReturnMsg("登录成功");
				Log.debug("################# 用户  {} 登录成功. ##################",
						mobile);
			} catch (Exception e) {
				baseBody.setReturnResult(ReturnStatus.SUCCESS);
				baseBody.setReturnCode(200);
				baseBody.setReturnMsg("找不到缓存服务器");
				Log.debug("{}------找不到缓存服务器", new Date());
				e.printStackTrace();
			}
		}

		return baseBody;
	}

	/**
	 * 检查登录
	 * 
	 * 手机号码
	 * 
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/checkLogin", method = RequestMethod.GET)
	public BaseBody<String> checkLogin(@RequestParam String token) {
		BaseBody<String> baseBody = new BaseBody<String>();

		if (new RedisUtil().hasKey(token)) {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setData(token);
			baseBody.setReturnMsg("用户已登录");
		} else {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setReturnMsg("用户未登录");
		}
		return baseBody;
	}

	/**
	 * 退出登录
	 * 
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/offLogin", method = RequestMethod.POST)
	public BaseBody<String> offLogin(@RequestParam String token) {
		BaseBody<String> baseBody = new BaseBody<String>();

		if (new RedisUtil().hasKey(token)) {
			new RedisUtil().del(token);
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setReturnMsg("退出登录成功");
		} else {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setReturnMsg("用户未登录");
		}
		return baseBody;
	}

	/**
	 * 密码修改
	 * 
	 * @param oldPassword
	 * @param newPassword
	 * @param request
	 * @param response
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/modifyPassword", method = RequestMethod.POST)
	public BaseBody<String> modifyPassword(@RequestParam String oldPassword,
			@RequestParam String newPassword, HttpServletRequest request,
			HttpServletResponse response) {
		BaseBody<String> baseBody = new BaseBody<String>();

		String token = request.getHeader("token");
		String mobile = String.valueOf(new RedisUtil().get(token));
		if (null == mobile) {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("用户未登录");
			return baseBody;
		}
		int status = studentService.checkPassword(mobile, oldPassword);
		if (status != 2) {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("原密码不正确");
			return baseBody;
		}
		int rel = studentService.modifyPassword(mobile, newPassword);
		if (rel != 0) {
			baseBody.setReturnResult(ReturnStatus.SUCCESS);
			baseBody.setReturnCode(200);
			baseBody.setReturnMsg("密码修改成功");
		} else {
			baseBody.setReturnResult(ReturnStatus.FAILD);
			baseBody.setReturnCode(500);
			baseBody.setReturnMsg("密码修改失败 ");
		}
		return baseBody;
	}
}
