package com.cz.enrol.controller.management;

import com.cz.enrol.annotation.Session;
import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.BasePage;
import com.cz.enrol.common.ManageBaseBody;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.entity.Goods;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.User;
import com.cz.enrol.service.*;
import com.cz.enrol.utils.TokenUtil;
import com.cz.enrol.vo.GoodsEx;
import com.cz.enrol.vo.StuGoodsEx;
import com.cz.enrol.vo.UserEx;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author Created by liuzhongshuai on 2017/10/23.
 */
@RestController
@RequestMapping("/managenment/goods")
public class ManagerGoodsController {

    @Autowired
    private GoodsService managerGoodsService;

    @Autowired
    private DictService dictService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private OrderMainService orderMainService;

    @Autowired
    private CampusService campusService;



    /**
     * 商品 生成订单
     *
     * @param stuGoodsEx
     * @return
     */
    @PostMapping("/genOrderMain")
    public BaseBody<OrderMain> genOrderMain(HttpServletRequest request, StuGoodsEx stuGoodsEx, @Session UserEx userEx) {
        BaseBody<OrderMain> baseBody = new BaseBody<OrderMain>();

        stuGoodsEx.setCreator(userEx.getName());

        OrderMain result = orderMainService.generateOrder(stuGoodsEx);
        if (null == result) {
            baseBody.setCode(1005);
            baseBody.setMessage("订单生成失败");
            baseBody.setSuccess(ReturnStatus.FAILD);
            return baseBody;
        }
        baseBody.setMessage("订单生成成功!");
        return baseBody;
    }

    /**
     * 新增商品
     *
     * @param goodsEx
     * @return
     */
    @PostMapping("/addGoods")
    public BaseBody<Goods> addGoods(@Session UserEx userEx, HttpServletRequest request, @Valid GoodsEx goodsEx, BindingResult bindingResult, @RequestParam("coverImg") MultipartFile coverImg, @RequestParam("detailImg") MultipartFile detailImg) throws IOException {

        BaseBody<Goods> baseBody = new BaseBody<Goods>();
        if (bindingResult.hasErrors()) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage(bindingResult.getFieldError().getDefaultMessage());
            return baseBody;
        }
        //图片转base64
        String coverImgName = coverImg.getOriginalFilename();
        String coverImguffix = coverImgName.substring(coverImgName.lastIndexOf(".") + 1);
        String img64Str = new String(Base64.encodeBase64(coverImg.getBytes()));
        goodsEx.setCoverImgTmp("data:image/" + coverImguffix + ";base64," + img64Str);

        String detailImgName = detailImg.getOriginalFilename();
        String detailImgSuffix = coverImgName.substring(detailImgName.lastIndexOf(".") + 1);
        String img64Strd = new String(Base64.encodeBase64(coverImg.getBytes()));
        goodsEx.setDetailImgTmp("data:image/" + detailImgSuffix + ";base64," + img64Strd);

        goodsEx.setCreator(userEx.getName());

        managerGoodsService.batchAddGoodsClass(goodsEx);
        baseBody.setMessage("保存成功!");
        return baseBody;
    }


    /**
     * 编辑商品
     *
     * @param goodsEx
     * @return
     */
    @PostMapping("/editGoods")
    public BaseBody<Goods> editGoods(@Session UserEx userEx, HttpServletRequest request, @Valid GoodsEx goodsEx, BindingResult bindingResult, @RequestParam(value = "coverImg", required = false) MultipartFile coverImg, @RequestParam(value = "detailImg", required = false) MultipartFile detailImg) throws IOException {

        BaseBody<Goods> baseBody = new BaseBody<Goods>();
        if (bindingResult.hasErrors()) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage(bindingResult.getFieldError().getDefaultMessage());
            return baseBody;
        }
        //图片转base64
        if (!(null == coverImg || null == coverImg.getOriginalFilename())) {
            String coverImgName = coverImg.getOriginalFilename();
            String coverImguffix = coverImgName.substring(coverImgName.lastIndexOf(".") + 1);
            String img64Str = new String(Base64.encodeBase64(coverImg.getBytes()));
            goodsEx.setCoverImgTmp("data:image/" + coverImguffix + ";base64," + img64Str);
        }
        if (!(null == detailImg || null == detailImg.getOriginalFilename())) {
            String detailImgName = detailImg.getOriginalFilename();
            String detailImgSuffix = detailImgName.substring(detailImgName.lastIndexOf(".") + 1);
            String img64Strd = new String(Base64.encodeBase64(coverImg.getBytes()));
            goodsEx.setDetailImgTmp("data:image/" + detailImgSuffix + ";base64," + img64Strd);
        }
        goodsEx.setCreator(userEx.getName());

        managerGoodsService.batchAddGoodsClass(goodsEx);
        baseBody.setMessage("保存成功!");
        return baseBody;
    }


    /**
     * 商品管理，查询商品列表 分页
     *
     * @param conditions
     * @return
     */
    @GetMapping("/queryGoodsList")
    public ManageBaseBody queryGoodsList(@RequestParam Map<String, String> conditions, @RequestParam(defaultValue = "1") Integer page, @RequestParam(defaultValue = "10") Integer limit) {

        ManageBaseBody basePageBaseBody = new ManageBaseBody();

        if (null == conditions || conditions.size() == 0) {
            conditions = new HashMap<String, String>(16);
        }
        BasePage<Map<String, Object>> basePage = managerGoodsService.queryByConditions(page, limit, conditions);

        basePageBaseBody.setCode(0);
        basePageBaseBody.setCount(basePage.getCount());
        basePageBaseBody.setData(basePage.getPageData());
        basePageBaseBody.setSuccess(ReturnStatus.SUCCESS);
        return basePageBaseBody;
    }

    /**
     * 商品上下架
     *
     * @param goodsId
     * @return
     */
    @DeleteMapping("/upOrDownGoods")
    public BaseBody upOrDownGoods(@RequestParam(defaultValue = "0") String goodsId, @RequestParam(defaultValue = "0") String status) {
        BaseBody baseBody = new BaseBody();
        if ("0".equals(goodsId)) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("商品编号不正确!");
            return baseBody;
        }
        //验证参数值范围
        if ((!"0".equals(status) || "1".equals(status))) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("参数值不正确!");
            return baseBody;
        }
        //查询商品是否存在
        Goods goodsTmp = managerGoodsService.selectByPrimaryKey(Long.parseLong(goodsId));
        if (null == goodsTmp) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("未能查询到该商品!");
            return baseBody;
        }
        if (goodsTmp.getIsDel() == 1) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("改商品已经被删除!");
            return baseBody;
        }
        if (goodsTmp.getStatus() == Byte.valueOf(status).byteValue()) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("已经是目标状态!");
            return baseBody;
        }
        goodsTmp.setStatus(Byte.valueOf(status).byteValue());
        goodsTmp.setEditTime(System.currentTimeMillis());
        managerGoodsService.updateByPk(goodsTmp);

        baseBody.setMessage("操作成功!");
        return baseBody;

    }

    /**
     * 通过商品编号删除 商品
     *
     * @param goodsNo
     * @return
     */
    @DeleteMapping("/delGoods")
    public BaseBody delGoods(@RequestParam(defaultValue = "0") String goodsId) {
        BaseBody baseBody = new BaseBody();
        if ("0".equals(goodsId)) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("商品编号不正确!");
            return baseBody;
        }
        //查询商品是否存在
        Goods goodsTmp = managerGoodsService.selectByPrimaryKey(Long.parseLong(goodsId));
        if (null == goodsTmp) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("未能查询到该商品!");
            return baseBody;
        }
        if (goodsTmp.getStatus().byteValue() == 1) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("只能删除已下架的商品!");
            return baseBody;
        }
        if (goodsTmp.getIsDel() == 1) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setCode(1006);
            baseBody.setMessage("该商品已经被删除!");
            return baseBody;
        }
        goodsTmp.setIsDel((byte) 1);
        managerGoodsService.updateByPk(goodsTmp);

        baseBody.setMessage("删除成功!");
        return baseBody;
    }

    /**
     * 商品详情
     *
     * @param goodsId
     * @return
     */
    @GetMapping("/goodsDetail")
    public BaseBody<Map<String, String>> goodsDetail(Long goodsId) {

        BaseBody<Map<String, String>> baseBody = new BaseBody();
        if (null == goodsId) {
            baseBody.setSuccess(ReturnStatus.FAILD);
            baseBody.setMessage("参数不正确!");
            return baseBody;
        }
        Map<String, String> goodsDetail = managerGoodsService.getGoodsDetail(goodsId);
        baseBody.setContent(goodsDetail);
        return baseBody;
    }

}
