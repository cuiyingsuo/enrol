package com.cz.enrol.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.cz.enrol.entity.Campus;
import com.cz.enrol.entity.OrderFlow;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.OrderSub;
import com.cz.enrol.service.CampusService;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.OrderSubService;
import com.cz.enrol.service.PayService;
import com.cz.enrol.service.ems.SynchBaseDataForEms;
import com.cz.enrol.utils.payment.RSA2ForMchtUtils;

/**
 * 支付回调接口
 *
 * @author My
 */
@RestController
@RequestMapping("/payResultController")
public class PayResultController {

    // 统一记录日志类
    private Logger logger = LoggerFactory.getLogger("enrol");

    @Autowired
    private PayService payService;

    @Autowired
    private OrderSubService orderSubService;
    @Autowired
    private OrderMainService orderMainService;
    @Autowired
    private SynchBaseDataForEms synchBaseDataForEms;
    @Autowired
    private CampusService campusService;

    @Value("${allin.h5-pay.return-url}")
    private String returnUrl;
    /**
     * 支付平台公钥
     */
    @Value("${itcast-pay.public-key}")
    private String publicKey;

    /**
     * 支付结果回执
     *
     * @throws ParseException
     */
    @RequestMapping(value = "/payResult", method = RequestMethod.POST)
    public Map<String, String> payResult(@RequestBody Map<String, String> result) {
        logger.info("支付平台异步回调进入...{}", JSON.toJSONString(result));
        Map<String, String> retMap = new HashMap();

        String appId = result.get("app_id");
        String format = result.get("format");
        String version = result.get("version");
        String charset = result.get("charset");
        String timestamp = result.get("timestamp");
        String sign = result.get("sign");
        logger.info("{},{},{},{},{},{}", appId, format, version, charset, timestamp, sign);

        String biz_params = result.get("biz_params");

        logger.info("{}", biz_params);

        JSONObject bizPObj = JSON.parseObject(biz_params);
        String merchant_order_no = bizPObj.getString("merchant_order_no");
        String main_order_no = bizPObj.getString("main_order_no");
        String order_status = bizPObj.getString("order_status");
        String total_amount = bizPObj.getString("total_amount");
        String discount_amount = bizPObj.getString("discount_amount");

        logger.info("{},{},{},{},{}", merchant_order_no, main_order_no, order_status, total_amount, discount_amount);

        String sub_order = bizPObj.getString("sub_order");
        JSONObject bizSubObj = JSON.parseObject(sub_order);
        String sub_order_no = bizSubObj.getString("sub_order_no");
        String amount = bizSubObj.getString("amount");
        String currency = bizSubObj.getString("currency");
        String payment_time = bizSubObj.getString("payment_time");
        String canceled_time = bizSubObj.getString("canceled_time");
        String sub_order_status = bizSubObj.getString("sub_order_status");

        logger.info("{},{},{},{},{},{}", sub_order_no, amount, currency, payment_time, canceled_time, sub_order_status);
        retMap.put("merchant_order_no", merchant_order_no);

		/*SortedMap<String,String> paramsMap = new TreeMap<>();
        paramsMap.put("app_id", appId);
		paramsMap.put("version", format);
		paramsMap.put("version", version);
		paramsMap.put("charset", charset);
		paramsMap.put("timestamp", timestamp);
		paramsMap.put("sign", sign);
		//业务参数集合
		SortedMap<String,Object> bizParams = new TreeMap<>();
		bizParams.put("merchant_order_no", merchant_order_no);
		bizParams.put("main_order_no", main_order_no);
		bizParams.put("order_status", order_status);
		bizParams.put("total_amount", total_amount);
		bizParams.put("discount_amount", discount_amount);
		
		bizParams.put("sub_order", sub_order);
		bizParams.put("sub_order_no", sub_order_no);
		bizParams.put("amount", amount);
		bizParams.put("currency", currency);
		bizParams.put("payment_time", payment_time);
		bizParams.put("canceled_time", canceled_time);
		bizParams.put("sub_order_status", sub_order_status);
		
		paramsMap.put("biz_params", JSON.toJSONString(bizParams));*/

        boolean signStatus = RSA2ForMchtUtils.rsa2Check(result, publicKey);

        // 记录流水
        OrderSub orderSub = new OrderSub();
        orderSub.setOrderNo(merchant_order_no);
        orderSub = orderSubService.selectOne(orderSub);
        logger.info("支付平台回调，支付订单号：{}", merchant_order_no);
        logger.info("分订单id：{}", orderSub.getId());
        OrderMain om = new OrderMain();
        om.setMergeOrderNo(orderSub.getMergeOrderNo());
        logger.info("支付平台回调，主订单号：{},{}", orderSub.getMergeOrderNo(), om.getMergeOrderNo());
        OrderMain orderMain = orderMainService.selectOne(om);
        logger.info("主订单id：{}", orderMain.getId());

        OrderFlow orderFlow = new OrderFlow();
        BigDecimal bd = new BigDecimal(total_amount);
        orderFlow.setAmount(bd.movePointRight(2).intValue());
        orderFlow.setCreateDatetime(new Date());
        orderFlow.setMargeOrderNo(orderSub.getMergeOrderNo());
        orderFlow.setOrderNo(merchant_order_no);
        orderFlow.setPayChannelCode("payment");
        orderFlow.setPayChannelName("传智支付平台");
        orderFlow.setPayId(orderSub.getId());
        orderFlow.setFlowId(main_order_no);
        orderFlow.setPaymentType(String.valueOf(orderMain.getPayType()));
        orderFlow.setPayUserId(orderMain.getStudentId());

        if ("SUCCESS".equals(order_status)) {
            orderFlow.setStatus(1);
            logger.info("支付流水状态：{}", orderFlow.getStatus());
            orderFlow.setPayDescription("支付成功");
        } else {
            orderFlow.setStatus(0);
            logger.info("支付流水状态：{}", orderFlow.getStatus());
            orderFlow.setPayDescription("支付失败");
            retMap.put("return_code", "SUCCESS");
            retMap.put("return_msg", "支付失败");
        }
        payService.recordFlow(orderFlow);
        logger.info("回执验证：{},{}", sign, signStatus);

        if (signStatus) {
            if (orderFlow.getStatus() == 1) {
                // 记录订单信息
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    payService.recordOrderInfo(merchant_order_no, sdf.parse(timestamp).getTime());

                    //将支付结果同步到ems
                    Map<String, String> payRel = new HashMap(6);
                    payRel.put("clazzId", String.valueOf(orderMain.getClassId()));
                    payRel.put("fee", total_amount);
                    if (orderMain.getIsFree() == 0) {
                        payRel.put("incomeExpensesType", "1");
                    } else {
                        payRel.put("incomeExpensesType", "2");
                    }
                    payRel.put("paymentId", main_order_no);
                    Campus campus = campusService.selectByPrimaryKey(orderMain.getCampusId());
                    payRel.put("schoolCode", campus.getSerialCode());
                    payRel.put("studentId", String.valueOf(orderMain.getStudentId()));
                    synchBaseDataForEms.pushPayRelToEms(payRel);

                } catch (NumberFormatException e) {
                    logger.error("同步ems异常:{}", e);
                } catch (ParseException e) {
                    logger.error("同步ems异常:{}", e);
                } catch (Exception e) {
                    logger.error("同步ems异常:{}", e);
                }
                retMap.put("return_code", "SUCCESS");
                retMap.put("return_msg", "支付成功");
            } else {
                logger.info("支付平台异步回调，返回支付状态非成功状态.{},{}", orderFlow.getStatus(), order_status);
                retMap.put("return_code", "SUCCESS");
                retMap.put("return_msg", "支付失败");
            }
        } else {
            logger.info("支付平台异步回调，验证签名失败");
            retMap.put("return_code", "FAIL");
            retMap.put("return_msg", "签名验证失败");
        }
        return retMap;
    }

    /**
     * 信用卡分期回调通知
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "/installmentNotify", method = RequestMethod.POST)
    public String installmentNotify(HttpServletRequest request,
                                    HttpServletResponse response) {
        logger.info("------------------------------------------分期支付，异步通知-----------------------------------------");
        Map<String, String[]> requestMap = request.getParameterMap();
        HashMap<String, String> notifyMap = new HashMap<String, String>();
        for (String key : requestMap.keySet()) {
            String value = requestMap.get(key)[0];
            notifyMap.put(key, value);
        }
        boolean verifyRel = payService.installmentNotify(notifyMap);
        if (verifyRel) {
            logger.info("分期支付，异步通知.返回{}", "success");
            return "success";
        }
        logger.info("分期支付，异步通知.返回{}", "error");
        return "error";
    }
}
