package com.cz.enrol.controller;

import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.cz.enrol.entity.OrderFlow;
import com.cz.enrol.entity.OrderMain;
import com.cz.enrol.entity.OrderSub;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.OrderSubService;
import com.cz.enrol.service.PayService;

/**
 * 
 * 支付回调接口
 * 
 * @author My
 *
 */
@RestController
@RequestMapping("/payResultController")
public class PayResultController {

	// 统一记录日志类
	private Logger logger = LoggerFactory.getLogger("enrol");

	@Autowired
	private PayService payService;
	
	@Autowired
	private OrderSubService orderSubService;
	@Autowired
	private OrderMainService orderMainService;

	@Value("${allin.h5-pay.return-url}")
	private String returnUrl;

	/**
	 * 支付结果回执
	 * 
	 * @param request
	 * @param response
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/payResult", method = RequestMethod.POST)
	public void payResult(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		logger.info("--------------------------------------订单结果回执---------------------------------------------------");
		// 接收Server返回的支付结果
		String merchantId = request.getParameter("merchantId");
		String version = request.getParameter("version");
		String language = request.getParameter("language");
		String signType = request.getParameter("signType");
		String payType = request.getParameter("payType");
		String issuerId = request.getParameter("issuerId");
		String paymentOrderId = request.getParameter("paymentOrderId");
		String orderNo = request.getParameter("orderNo");
		String orderDatetime = request.getParameter("orderDatetime");
		String orderAmount = request.getParameter("orderAmount");
		String payDatetime = request.getParameter("payDatetime");
		String payAmount = request.getParameter("payAmount");
		String ext1 = request.getParameter("ext1");
		String ext2 = request.getParameter("ext2");
		String payResult = request.getParameter("payResult");
		String errorCode = request.getParameter("errorCode");
		String returnDatetime = request.getParameter("returnDatetime");
		String signMsg = request.getParameter("signMsg");

		logger.info(
				"merchantId：{}  version：{}  language：{}  signType：{}  payType：{}  issuerId：{}  "
						+ "paymentOrderId：{}  orderNo：{}  orderDatetime:{}  orderAmount:{}  payDatetime:{}"
						+ "  payAmount:{}  ext1:{}  ext2:{}  payResult:{}  errorCode:{}  returnDatetime:{}  signMsg:{}",
				merchantId, version, language, signType, payType, issuerId,
				paymentOrderId, orderNo, orderDatetime, orderAmount,
				payDatetime, payAmount, ext1, ext2, payResult, errorCode,
				returnDatetime, signMsg);

		// 验签是商户为了验证接收到的报文数据确实是支付网关发送的。
		// 构造订单结果对象，验证签名。
		com.allinpay.ets.client.PaymentResult paymentResult = new com.allinpay.ets.client.PaymentResult();
		paymentResult.setMerchantId(merchantId);
		paymentResult.setVersion(version);
		paymentResult.setLanguage(language);
		paymentResult.setSignType(signType);
		paymentResult.setPayType(payType);
		paymentResult.setIssuerId(issuerId);
		paymentResult.setPaymentOrderId(paymentOrderId);
		paymentResult.setOrderNo(orderNo);
		paymentResult.setOrderDatetime(orderDatetime);
		paymentResult.setOrderAmount(orderAmount);
		paymentResult.setPayDatetime(payDatetime);
		paymentResult.setPayAmount(payAmount);
		paymentResult.setExt1(ext1);
		paymentResult.setExt2(ext2);
		paymentResult.setPayResult(payResult);
		paymentResult.setErrorCode(errorCode);
		paymentResult.setReturnDatetime(returnDatetime);
		paymentResult.setKey("1234567890");
		// signMsg为服务器端返回的签名值。
		paymentResult.setSignMsg(signMsg);
		// signType为"1"时，必须设置证书路径。
		// paymentResult.setCertPath("/opt/conf/TLCert-test.cer");

		// 验证签名：返回true代表验签成功；否则验签失败。
		boolean verifyResult = paymentResult.verify();

		// 验签成功，还需要判断订单状态，为"1"表示支付成功。
		boolean paySuccess = verifyResult && payResult.equals("1");

		// 记录通联回执信息
		payService.recordPaymentResult(paymentResult, verifyResult);
		// 记录流水
		OrderSub orderSub = new OrderSub();
		orderSub.setOrderNo(orderNo);
		orderSub = orderSubService.selectOne(orderSub);
		
		OrderMain orderMain = new OrderMain();
		orderMain.setMergeOrderNo(orderSub.getMergeOrderNo());
		orderMain=orderMainService.selectOne(orderMain);
		
		OrderFlow orderFlow = new OrderFlow();
		orderFlow.setAmount(Integer.parseInt(orderAmount));
		orderFlow.setCreateDatetime(new Date());
		orderFlow.setMargeOrderNo(orderSub.getMergeOrderNo());
		orderFlow.setOrderNo(orderNo);
		orderFlow.setPayChannelCode("pay_TL");
		orderFlow.setPayChannelName("通联银行卡支付");
		orderFlow.setPayId(orderSub.getId());
		orderFlow.setFlowId(paymentOrderId);
		orderFlow.setPaymentType(String.valueOf(orderMain.getPayType()));
		orderFlow.setPayUserId(orderMain.getStudentId());
		orderFlow.setStatus(Integer.parseInt(payResult));
		if(orderFlow.getStatus()==1){
			logger.info("支付流水状态：{}", orderFlow.getStatus());
			orderFlow.setPayDescription("支付成功");
		}else{
			logger.info("支付流水状态：{}", orderFlow.getStatus());
			orderFlow.setPayDescription("支付失败");
		}
		payService.recordFlow(orderFlow);
		
		logger.info("回执验证：{}", paySuccess);
		if (paySuccess) {
			// 记录订单信息
			payService.recordOrderInfo(paymentResult);
		}
		try {
			response.sendRedirect(returnUrl);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 信用卡分期回调通知
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/installmentNotify", method = RequestMethod.POST)
	public String installmentNotify(HttpServletRequest request,
			HttpServletResponse response) {
		logger.info("------------------------------------------分期支付，异步通知-----------------------------------------");
		Map<String, String[]> requestMap = request.getParameterMap();
		HashMap<String, String> notifyMap = new HashMap<String, String>();
		for (String key : requestMap.keySet()) {
			String value = requestMap.get(key)[0];
			notifyMap.put(key, value);
		}
		boolean verifyRel = payService.installmentNotify(notifyMap);
		if (verifyRel) {
			logger.info("分期支付，异步通知.返回{}", "success");
			return "success";
		}
		logger.info("分期支付，异步通知.返回{}", "error");
		return "error";
	}
}
