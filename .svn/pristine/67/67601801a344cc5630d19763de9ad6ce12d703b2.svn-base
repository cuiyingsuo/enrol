package com.cz.enrol.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSONObject;
import com.allinpay.ets.client.RequestOrder;
import com.cz.enrol.common.BaseBody;
import com.cz.enrol.common.ReturnStatus;
import com.cz.enrol.service.OrderMainService;
import com.cz.enrol.service.PayService;
import com.cz.enrol.utils.RedisUtil;

/**
 * 
 * 支付访问接口
 * @author My
 *
 */
@RestController
@RequestMapping("/payController")
public class PayController {
	// 统一记录日志类
	private Logger Log = LoggerFactory.getLogger("enrol");
	@Autowired
	private OrderMainService orderMainService;
	
	@Autowired
	private PayService payService;
	
	@Value("${server.token-key}")
    private String loginToken;
	
	@RequestMapping(value = "/pay", method = RequestMethod.POST)
	public BaseBody pay(String orderMainNo,HttpServletRequest request, HttpServletResponse response) { 
		BaseBody<RequestOrder> baseBody = new BaseBody<RequestOrder>();
		
		String token = request.getHeader(loginToken);
		if(null==token||!RedisUtil.hasKey(token)){
			baseBody.setSuccess(ReturnStatus.FAILD);
			baseBody.setCode(200);
			baseBody.setMessage("用户未登录或登录超时");
		}
		JSONObject jsonObj = JSONObject.parseObject(RedisUtil.get(token).toString());
		RequestOrder requestOrder = payService.createRequestOrder(jsonObj.get("mobile").toString(),orderMainNo);
		
		if(null!=requestOrder){
			baseBody.setSuccess(ReturnStatus.SUCCESS);
			baseBody.setCode(200);
			baseBody.setContent(requestOrder);
			baseBody.setMessage("订单信息请求成功");
		}else{
			baseBody.setSuccess(ReturnStatus.SUCCESS);
			baseBody.setCode(200);
			baseBody.setContent(requestOrder);
			baseBody.setMessage("订单信息生成失败");
		}
		return baseBody;
	}
	@RequestMapping(value = "/payResult", method = RequestMethod.POST)
	public void payResult(HttpServletRequest request, HttpServletResponse response){
		//接收Server返回的支付结果
		String merchantId=request.getParameter("merchantId");
		String version=request.getParameter("version");
		String language=request.getParameter("language");
		String signType=request.getParameter("signType");
		String payType=request.getParameter("payType");
		String issuerId=request.getParameter("issuerId");
		String paymentOrderId=request.getParameter("paymentOrderId");
		String orderNo=request.getParameter("orderNo");
		String orderDatetime=request.getParameter("orderDatetime");
		String orderAmount=request.getParameter("orderAmount");
		String payDatetime=request.getParameter("payDatetime");
		String payAmount=request.getParameter("payAmount");
		String ext1=request.getParameter("ext1");
		String ext2=request.getParameter("ext2");
		String payResult=request.getParameter("payResult");
		String errorCode=request.getParameter("errorCode");
		String returnDatetime=request.getParameter("returnDatetime");
		String signMsg=request.getParameter("signMsg");
	
		//验签是商户为了验证接收到的报文数据确实是支付网关发送的。
		//构造订单结果对象，验证签名。
		com.allinpay.ets.client.PaymentResult paymentResult = new com.allinpay.ets.client.PaymentResult();
		paymentResult.setMerchantId(merchantId);
		paymentResult.setVersion(version);
		paymentResult.setLanguage(language);
		paymentResult.setSignType(signType);
		paymentResult.setPayType(payType);
		paymentResult.setIssuerId(issuerId);
		paymentResult.setPaymentOrderId(paymentOrderId);
		paymentResult.setOrderNo(orderNo);
		paymentResult.setOrderDatetime(orderDatetime);
		paymentResult.setOrderAmount(orderAmount);
		paymentResult.setPayDatetime(payDatetime);
		paymentResult.setPayAmount(payAmount);
		paymentResult.setExt1(ext1);
		paymentResult.setExt2(ext2);
		paymentResult.setPayResult(payResult);
		paymentResult.setErrorCode(errorCode);
		paymentResult.setReturnDatetime(returnDatetime);
		//signMsg为服务器端返回的签名值。
		paymentResult.setSignMsg(signMsg); 
		//signType为"1"时，必须设置证书路径。
		paymentResult.setCertPath("/opt/conf/TLCert-test.cer"); 
		
		//验证签名：返回true代表验签成功；否则验签失败。
		boolean verifyResult = paymentResult.verify();
		
		//验签成功，还需要判断订单状态，为"1"表示支付成功。
		boolean paySuccess = verifyResult && payResult.equals("1");
		
		if(paySuccess){
			
		}
		
	}
}